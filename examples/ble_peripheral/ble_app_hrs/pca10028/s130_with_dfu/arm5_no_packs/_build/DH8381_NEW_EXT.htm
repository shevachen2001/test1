<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\_build\DH8381_NEW_EXT.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\_build\DH8381_NEW_EXT.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Wed Jun 19 16:44:57 2019
<BR><P>
<H3>Maximum Stack Usage =        584 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
Carddet_timer_handler &rArr; Access_DetCardProc &rArr; Access_CardDatProc &rArr; ble_dahao_start_advert &rArr; advertising_init &rArr; ble_advertising_init &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">NMI_Handler</a><BR>
 <LI><a href="#[3]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">HardFault_Handler</a><BR>
 <LI><a href="#[4]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">SVC_Handler</a><BR>
 <LI><a href="#[5]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">PendSV_Handler</a><BR>
 <LI><a href="#[6]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SysTick_Handler</a><BR>
 <LI><a href="#[15]">CCM_AAR_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">CCM_AAR_IRQHandler</a><BR>
 <LI><a href="#[d3]">Sys_GenFunDelayUs</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d3]">Sys_GenFunDelayUs</a><BR>
 <LI><a href="#[8d]">__asm___11_app_timer_c_cd27f9c3__nrf_delay_us</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8d]">__asm___11_app_timer_c_cd27f9c3__nrf_delay_us</a><BR>
 <LI><a href="#[1aa]">flash_api_err_code_process</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[193]">sm_state_change</a><BR>
 <LI><a href="#[193]">sm_state_change</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[193]">sm_state_change</a><BR>
 <LI><a href="#[192]">clear_operation_execute</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[193]">sm_state_change</a><BR>
 <LI><a href="#[8c]">__asm___11_nrf_delay_c_532987f3__nrf_delay_us</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8c]">__asm___11_nrf_delay_c_532987f3__nrf_delay_us</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[d]">ADC_IRQHandler</a> from nrf_drv_adc.o(i.ADC_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[54]">Beep_IoCtl</a> from beep.o(i.Beep_IoCtl) referenced from beep.o(.constdata)
 <LI><a href="#[52]">Beep_Open</a> from beep.o(i.Beep_Open) referenced from beep.o(.constdata)
 <LI><a href="#[53]">Beep_Write</a> from beep.o(i.Beep_Write) referenced from beep.o(.constdata)
 <LI><a href="#[30]">BleProc_timer_handler</a> from main.o(i.BleProc_timer_handler) referenced from main.o(i.main)
 <LI><a href="#[15]">CCM_AAR_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[32]">Carddet_timer_handler</a> from main.o(i.Carddet_timer_handler) referenced from main.o(i.main)
 <LI><a href="#[14]">ECB_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[6e]">Flash_Close</a> from flash.o(i.Flash_Close) referenced from flash.o(.constdata)
 <LI><a href="#[71]">Flash_IoCtl</a> from flash.o(i.Flash_IoCtl) referenced from flash.o(.constdata)
 <LI><a href="#[6d]">Flash_Open</a> from flash.o(i.Flash_Open) referenced from flash.o(.constdata)
 <LI><a href="#[6f]">Flash_Read</a> from flash.o(i.Flash_Read) referenced from flash.o(.constdata)
 <LI><a href="#[70]">Flash_Write</a> from flash.o(i.Flash_Write) referenced from flash.o(.constdata)
 <LI><a href="#[c]">GPIOTE_IRQHandler</a> from nrf_drv_gpiote.o(i.GPIOTE_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[3]">HardFault_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[6a]">Key_Close</a> from key.o(i.Key_Close) referenced from key.o(.constdata)
 <LI><a href="#[6c]">Key_IoCtl</a> from key.o(i.Key_IoCtl) referenced from key.o(.constdata)
 <LI><a href="#[69]">Key_Open</a> from key.o(i.Key_Open) referenced from key.o(.constdata)
 <LI><a href="#[6b]">Key_Read</a> from key.o(i.Key_Read) referenced from key.o(.constdata)
 <LI><a href="#[19]">LPCOMP_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[85]">Light_AllOff</a> from light.o(i.Light_AllOff) referenced from light.o(.constdata)
 <LI><a href="#[84]">Light_AllOn</a> from light.o(i.Light_AllOn) referenced from light.o(.constdata)
 <LI><a href="#[86]">Light_AllTogg</a> from light.o(i.Light_AllTogg) referenced from light.o(.constdata)
 <LI><a href="#[79]">Light_BattOff</a> from light.o(i.Light_BattOff) referenced from light.o(.constdata)
 <LI><a href="#[78]">Light_BattOn</a> from light.o(i.Light_BattOn) referenced from light.o(.constdata)
 <LI><a href="#[7a]">Light_BattTogg</a> from light.o(i.Light_BattTogg) referenced from light.o(.constdata)
 <LI><a href="#[7c]">Light_ConnOff</a> from light.o(i.Light_ConnOff) referenced from light.o(.constdata)
 <LI><a href="#[7b]">Light_ConnOn</a> from light.o(i.Light_ConnOn) referenced from light.o(.constdata)
 <LI><a href="#[7d]">Light_ConnTogg</a> from light.o(i.Light_ConnTogg) referenced from light.o(.constdata)
 <LI><a href="#[89]">Light_IoCtl</a> from light.o(i.Light_IoCtl) referenced from light.o(.constdata)
 <LI><a href="#[82]">Light_NgOff</a> from light.o(i.Light_NgOff) referenced from light.o(.constdata)
 <LI><a href="#[81]">Light_NgOn</a> from light.o(i.Light_NgOn) referenced from light.o(.constdata)
 <LI><a href="#[83]">Light_NgTogg</a> from light.o(i.Light_NgTogg) referenced from light.o(.constdata)
 <LI><a href="#[7f]">Light_OkOff</a> from light.o(i.Light_OkOff) referenced from light.o(.constdata)
 <LI><a href="#[7e]">Light_OkOn</a> from light.o(i.Light_OkOn) referenced from light.o(.constdata)
 <LI><a href="#[80]">Light_OkTogg</a> from light.o(i.Light_OkTogg) referenced from light.o(.constdata)
 <LI><a href="#[87]">Light_Open</a> from light.o(i.Light_Open) referenced from light.o(.constdata)
 <LI><a href="#[88]">Light_Write</a> from light.o(i.Light_Write) referenced from light.o(.constdata)
 <LI><a href="#[2]">NMI_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[7]">POWER_CLOCK_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[5]">PendSV_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[60]">ProtoAnaly_AddKeyInfo</a> from proto_analy.o(i.ProtoAnaly_AddKeyInfo) referenced from proto_analy.o(.constdata)
 <LI><a href="#[23]">ProtoAnaly_CmdAppProc</a> from proto_analy.o(i.ProtoAnaly_CmdAppProc) referenced from proto_analy.o(i.ProtoAnaly_Init)
 <LI><a href="#[24]">ProtoAnaly_CmdMacProc</a> from proto_analy.o(i.ProtoAnaly_CmdMacProc) referenced from proto_analy.o(i.ProtoAnaly_Init)
 <LI><a href="#[66]">ProtoAnaly_ConfigDeviceExtIn</a> from proto_analy.o(i.ProtoAnaly_ConfigDeviceExtIn) referenced from proto_analy.o(.constdata)
 <LI><a href="#[61]">ProtoAnaly_DeleteKeyInfo</a> from proto_analy.o(i.ProtoAnaly_DeleteKeyInfo) referenced from proto_analy.o(.constdata)
 <LI><a href="#[26]">ProtoAnaly_EthAckOk</a> from proto_analy.o(i.ProtoAnaly_EthAckOk) referenced from proto_analy.o(i.ProtoAnaly_Init)
 <LI><a href="#[68]">ProtoAnaly_FactoryTest</a> from proto_analy.o(i.ProtoAnaly_FactoryTest) referenced from proto_analy.o(.constdata)
 <LI><a href="#[5c]">ProtoAnaly_GetTimeIn</a> from proto_analy.o(i.ProtoAnaly_GetTimeIn) referenced from proto_analy.o(.constdata)
 <LI><a href="#[5e]">ProtoAnaly_LoadRecordIn</a> from proto_analy.o(i.ProtoAnaly_LoadRecordIn) referenced from proto_analy.o(.constdata)
 <LI><a href="#[58]">ProtoAnaly_ModifyPaswdIn</a> from proto_analy.o(i.ProtoAnaly_ModifyPaswdIn) referenced from proto_analy.o(.constdata)
 <LI><a href="#[5a]">ProtoAnaly_PowerOffIn</a> from proto_analy.o(i.ProtoAnaly_PowerOffIn) referenced from proto_analy.o(.constdata)
 <LI><a href="#[59]">ProtoAnaly_PowerOnIn</a> from proto_analy.o(i.ProtoAnaly_PowerOnIn) referenced from proto_analy.o(.constdata)
 <LI><a href="#[25]">ProtoAnaly_ProcEnd</a> from proto_analy.o(i.ProtoAnaly_ProcEnd) referenced from proto_analy.o(i.ProtoAnaly_Init)
 <LI><a href="#[27]">ProtoAnaly_PublicProc</a> from proto_analy.o(i.ProtoAnaly_PublicProc) referenced from proto_analy.o(i.ProtoAnaly_Init)
 <LI><a href="#[65]">ProtoAnaly_ReadDeviceInfoExtIn</a> from proto_analy.o(i.ProtoAnaly_ReadDeviceInfoExtIn) referenced from proto_analy.o(.constdata)
 <LI><a href="#[5f]">ProtoAnaly_ReadKeyInfo</a> from proto_analy.o(i.ProtoAnaly_ReadKeyInfo) referenced from proto_analy.o(.constdata)
 <LI><a href="#[67]">ProtoAnaly_ReadVerSionIn</a> from proto_analy.o(i.ProtoAnaly_ReadVerSionIn) referenced from proto_analy.o(.constdata)
 <LI><a href="#[5d]">ProtoAnaly_RecordAckIn</a> from proto_analy.o(i.ProtoAnaly_RecordAckIn) referenced from proto_analy.o(.constdata)
 <LI><a href="#[63]">ProtoAnaly_RomveIdin</a> from proto_analy.o(i.ProtoAnaly_RomveIdin) referenced from proto_analy.o(.constdata)
 <LI><a href="#[62]">ProtoAnaly_SetListIn</a> from proto_analy.o(i.ProtoAnaly_SetListIn) referenced from proto_analy.o(.constdata)
 <LI><a href="#[57]">ProtoAnaly_SetParaDefIn</a> from proto_analy.o(i.ProtoAnaly_SetParaDefIn) referenced from proto_analy.o(.constdata)
 <LI><a href="#[5b]">ProtoAnaly_SetTimeIn</a> from proto_analy.o(i.ProtoAnaly_SetTimeIn) referenced from proto_analy.o(.constdata)
 <LI><a href="#[64]">ProtoAnaly_SetTouchSenvedin</a> from proto_analy.o(i.ProtoAnaly_SetTouchSenvedin) referenced from proto_analy.o(.constdata)
 <LI><a href="#[56]">Pwm_IoCtl</a> from pwm.o(i.Pwm_IoCtl) referenced from pwm.o(.constdata)
 <LI><a href="#[55]">Pwm_Open</a> from pwm.o(i.Pwm_Open) referenced from pwm.o(.constdata)
 <LI><a href="#[18]">QDEC_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[8]">RADIO_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[13]">RNG_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[11]">RTC0_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[17]">RTC1_IRQHandler</a> from app_timer.o(i.RTC1_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[74]">Rc522_Ioctl</a> from rc522.o(i.Rc522_Ioctl) referenced from rc522.o(.constdata)
 <LI><a href="#[72]">Rc522_Open</a> from rc522.o(i.Rc522_Open) referenced from rc522.o(.constdata)
 <LI><a href="#[73]">Rc522_Read</a> from rc522.o(i.Rc522_Read) referenced from rc522.o(.constdata)
 <LI><a href="#[1]">Reset_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[77]">Rtc_Ioctl</a> from rtc.o(i.Rtc_Ioctl) referenced from rtc.o(.constdata)
 <LI><a href="#[75]">Rtc_Open</a> from rtc.o(i.Rtc_Open) referenced from rtc.o(.constdata)
 <LI><a href="#[76]">Rtc_Read</a> from rtc.o(i.Rtc_Read) referenced from rtc.o(.constdata)
 <LI><a href="#[a]">SPI0_TWI0_IRQHandler</a> from nrf_drv_spi.o(i.SPI0_TWI0_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[b]">SPI1_TWI1_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[4]">SVC_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1a]">SWI0_IRQHandler</a> from app_timer.o(i.SWI0_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1b]">SWI1_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1c]">SWI2_IRQHandler</a> from softdevice_handler.o(i.SWI2_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1d]">SWI3_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1e]">SWI4_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[1f]">SWI5_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[31]">SysBase_timer_handler</a> from main.o(i.SysBase_timer_handler) referenced from main.o(i.main)
 <LI><a href="#[6]">SysTick_Handler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[21]">SystemInit</a> from system_nrf51.o(i.SystemInit) referenced from arm_startup_nrf51.o(.text)
 <LI><a href="#[12]">TEMP_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[e]">TIMER0_IRQHandler</a> from nrf_drv_timer.o(i.TIMER0_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[f]">TIMER1_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[10]">TIMER2_IRQHandler</a> from sys_timebaseirq.o(i.TIMER2_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[9]">UART0_IRQHandler</a> from nrf_drv_uart.o(i.UART0_IRQHandler) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[16]">WDT_IRQHandler</a> from arm_startup_nrf51.o(.text) referenced from arm_startup_nrf51.o(RESET)
 <LI><a href="#[22]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from arm_startup_nrf51.o(.text)
 <LI><a href="#[33]">ble_evt_dispatch</a> from main.o(i.ble_evt_dispatch) referenced from main.o(i.main)
 <LI><a href="#[39]">conn_params_error_handler</a> from main.o(i.conn_params_error_handler) referenced from main.o(i.main)
 <LI><a href="#[4f]">data_page_erase_state_run</a> from pstorage.o(i.data_page_erase_state_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[4e]">data_to_swap_write_state_run</a> from pstorage.o(i.data_to_swap_write_state_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[35]">device_manager_evt_handler</a> from main.o(i.device_manager_evt_handler) referenced from main.o(i.main)
 <LI><a href="#[36]">dfu_app_on_dfu_evt</a> from dfu_app_handler.o(i.dfu_app_on_dfu_evt) referenced from main.o(i.main)
 <LI><a href="#[0]">dfu_app_reset_prepare</a> from dfu_app_handler.o(i.dfu_app_reset_prepare) referenced 2 times from dfu_app_handler.o(.data)
 <LI><a href="#[2f]">dm_pstorage_cb_handler</a> from device_manager_peripheral.o(i.dm_pstorage_cb_handler) referenced from device_manager_peripheral.o(i.dm_init)
 <LI><a href="#[46]">gattc_context_apply</a> from device_manager_peripheral.o(i.gattc_context_apply) referenced from device_manager_peripheral.o(.constdata)
 <LI><a href="#[42]">gattc_context_load</a> from device_manager_peripheral.o(i.gattc_context_load) referenced from device_manager_peripheral.o(.constdata)
 <LI><a href="#[3e]">gattc_context_store</a> from device_manager_peripheral.o(i.gattc_context_store) referenced from device_manager_peripheral.o(.constdata)
 <LI><a href="#[45]">gatts_context_apply</a> from device_manager_peripheral.o(i.gatts_context_apply) referenced from device_manager_peripheral.o(.constdata)
 <LI><a href="#[41]">gatts_context_load</a> from device_manager_peripheral.o(i.gatts_context_load) referenced from device_manager_peripheral.o(.constdata)
 <LI><a href="#[3d]">gatts_context_store</a> from device_manager_peripheral.o(i.gatts_context_store) referenced from device_manager_peripheral.o(.constdata)
 <LI><a href="#[47]">gattsc_context_apply</a> from device_manager_peripheral.o(i.gattsc_context_apply) referenced from device_manager_peripheral.o(.constdata)
 <LI><a href="#[43]">gattsc_context_load</a> from device_manager_peripheral.o(i.gattsc_context_load) referenced from device_manager_peripheral.o(.constdata)
 <LI><a href="#[3f]">gattsc_context_store</a> from device_manager_peripheral.o(i.gattsc_context_store) referenced from device_manager_peripheral.o(.constdata)
 <LI><a href="#[51]">head_restore_state_run</a> from pstorage.o(i.head_restore_state_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[20]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[44]">no_service_context_apply</a> from device_manager_peripheral.o(i.no_service_context_apply) referenced from device_manager_peripheral.o(.constdata)
 <LI><a href="#[40]">no_service_context_load</a> from device_manager_peripheral.o(i.no_service_context_load) referenced from device_manager_peripheral.o(.constdata)
 <LI><a href="#[3c]">no_service_context_store</a> from device_manager_peripheral.o(i.no_service_context_store) referenced from device_manager_peripheral.o(.constdata)
 <LI><a href="#[28]">on_adv_evt</a> from main.o(i.on_adv_evt) referenced from main.o(i.advertising_init)
 <LI><a href="#[38]">on_conn_params_evt</a> from main.o(i.on_conn_params_evt) referenced from main.o(i.main)
 <LI><a href="#[2e]">pstorage_store</a> from pstorage.o(i.pstorage_store) referenced from device_manager_peripheral.o(i.device_context_store)
 <LI><a href="#[2e]">pstorage_store</a> from pstorage.o(i.pstorage_store) referenced from device_manager_peripheral.o(i.dm_application_context_set)
 <LI><a href="#[2e]">pstorage_store</a> from pstorage.o(i.pstorage_store) referenced from device_manager_peripheral.o(i.gatts_context_store)
 <LI><a href="#[2d]">pstorage_update</a> from pstorage.o(i.pstorage_update) referenced from device_manager_peripheral.o(i.device_context_store)
 <LI><a href="#[2d]">pstorage_update</a> from pstorage.o(i.pstorage_update) referenced from device_manager_peripheral.o(i.dm_application_context_set)
 <LI><a href="#[2d]">pstorage_update</a> from pstorage.o(i.pstorage_update) referenced from device_manager_peripheral.o(i.gatts_context_store)
 <LI><a href="#[29]">pwm_ready_tick</a> from app_pwm.o(i.pwm_ready_tick) referenced from app_pwm.o(i.app_pwm_init)
 <LI><a href="#[37]">reset_prepare</a> from main.o(i.reset_prepare) referenced from main.o(i.main)
 <LI><a href="#[3a]">softdevice_fault_handler</a> from softdevice_handler.o(i.softdevice_fault_handler) referenced from softdevice_handler.o(i.softdevice_handler_init)
 <LI><a href="#[4a]">state_erase_data_page_entry_run</a> from pstorage.o(i.state_erase_data_page_entry_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[4c]">state_restore_head_entry_run</a> from pstorage.o(i.state_restore_head_entry_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[4b]">state_restore_tail_entry_run</a> from pstorage.o(i.state_restore_tail_entry_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[48]">state_swap_erase_entry_run</a> from pstorage.o(i.state_swap_erase_entry_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[49]">state_write_data_swap_entry_run</a> from pstorage.o(i.state_write_data_swap_entry_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[2c]">storage_operation_dummy_handler</a> from device_manager_peripheral.o(i.storage_operation_dummy_handler) referenced from device_manager_peripheral.o(i.device_context_store)
 <LI><a href="#[4d]">swap_erase_state_run</a> from pstorage.o(i.swap_erase_state_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[34]">sys_evt_dispatch</a> from main.o(i.sys_evt_dispatch) referenced from main.o(i.main)
 <LI><a href="#[50]">tail_restore_state_run</a> from pstorage.o(i.tail_restore_state_run) referenced from pstorage.o(.constdata)
 <LI><a href="#[3b]">uart_event_handle</a> from main.o(i.uart_event_handle) referenced from main.o(i.uart_init)
 <LI><a href="#[2a]">uart_event_handler</a> from app_uart_fifo.o(i.uart_event_handler) referenced from app_uart_fifo.o(i.app_uart_init)
 <LI><a href="#[2b]">update_timeout_handler</a> from ble_conn_params.o(i.update_timeout_handler) referenced from ble_conn_params.o(i.ble_conn_params_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[22]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(.text)
</UL>
<P><STRONG><a name="[1c5]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[8a]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[96]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1c6]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1c7]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1c8]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1c9]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1ca]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[8c]"></a>__asm___11_nrf_delay_c_532987f3__nrf_delay_us</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrf_delay.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_nrf_delay_c_532987f3__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_nrf_delay_c_532987f3__nrf_delay_us
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
</UL>

<P><STRONG><a name="[8d]"></a>__asm___11_app_timer_c_cd27f9c3__nrf_delay_us</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, app_timer.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_app_timer_c_cd27f9c3__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_app_timer_c_cd27f9c3__nrf_delay_us
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[18f]"></a>__asm___17_bootloader_util_c_c13d365c__bootloader_util_reset</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, bootloader_util.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_util_app_start
</UL>

<P><STRONG><a name="[1]"></a>Reset_Handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>CCM_AAR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>ECB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>LPCOMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>POWER_CLOCK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>QDEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>RADIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>RTC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>SPI1_TWI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SWI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>SWI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SWI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SWI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TEMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf51.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1cb]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_clear
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_pstorage_cb_handler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_swap_erase_entry_run
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_restore_tail_entry_run
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_page_erase_required
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;head_restore_state_run
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_operation_execute
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_channel_duty_set
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_GetWeekFromDay
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmUser_SetPameterBuzz
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_WlarmSet
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Set
</UL>

<P><STRONG><a name="[1cc]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_register
</UL>

<P><STRONG><a name="[90]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysBasetimer_Start
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carddet_timer_start
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleProc_timer_start
</UL>

<P><STRONG><a name="[1cd]"></a>rand</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rand.o(.text), UNUSED)

<P><STRONG><a name="[101]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_Init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_HashKeyInit
</UL>

<P><STRONG><a name="[9a]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proto_CommHostPackRec
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_load
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_peer_addr_get
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_app_on_dfu_evt
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCommu_Proc
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_ParainitFirst
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Parainit
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_LoadPara
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCommu_SendStart
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_ECB_decrypt
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_Encrypt
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proto_CommHostAckPack
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_SetListIn
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_ModifyCustomInfo
</UL>

<P><STRONG><a name="[111]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_context_store
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proto_CommHostAckPack
</UL>

<P><STRONG><a name="[1ce]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[94]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Proc
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_DetCardProc
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_EraseRecordData
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_EraseAllKey
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockKey_Remove_VisitCodeKey
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockKey_Remove_PasswordKey
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockKey_Remove_Key
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_RemoveId
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_LoadRecordIn
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockKey_RemoveKey
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockKey_CommPswdId
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlackList_LoadPara
</UL>

<P><STRONG><a name="[1cf]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1d0]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_instance_init
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dahao_get_scan_data
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Write
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Open
</UL>

<P><STRONG><a name="[114]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proto_CommHostPackRec
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_ParainitFirst
</UL>

<P><STRONG><a name="[1d1]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[95]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[184]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dahao_add_characteristics
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13e]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_context_store
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_pstorage_cb_handler
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_KeyProc
</UL>

<P><STRONG><a name="[92]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1d2]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1d3]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1d4]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[1d5]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[1d6]"></a>__decompress0</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[d]"></a>ADC_IRQHandler</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, nrf_drv_adc.o(i.ADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ADC_IRQHandler &rArr; adc_sample_process
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_sample_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>AES_Decrypt</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, aes.o(i.AES_Decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = AES_Decrypt &rArr; AES_ECB_decrypt &rArr; InvMixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_ECB_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCommu_Proc
</UL>

<P><STRONG><a name="[99]"></a>AES_ECB_decrypt</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, aes.o(i.AES_ECB_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = AES_ECB_decrypt &rArr; InvMixColumns
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyExpansion
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvShiftRows
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvMixColumns
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRoundKey
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_Decrypt
</UL>

<P><STRONG><a name="[9f]"></a>AES_Encrypt</STRONG> (Thumb, 46 bytes, Stack size 64 bytes, aes.o(i.AES_Encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AES_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proto_CommHostAckPack
</UL>

<P><STRONG><a name="[fd]"></a>Access_BeepStart</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, access.o(i.Access_BeepStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Access_BeepStart
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_TimerProc
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Proc
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proto_CommHostUnPackRec
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_SetTimeIn
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_SetParaDefIn
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_SetListIn
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_RomveIdin
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_ReadKeyInfo
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_ReadDeviceInfoExtIn
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_PowerOnIn
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_ModifyPaswdIn
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_ModifyCustomInfo
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_GetTimeIn
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_FactoryTest
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_DeleteKeyInfo
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_ConfigDeviceExtIn
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_AddKeyInfo
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_KeyProc
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Open
</UL>

<P><STRONG><a name="[a0]"></a>Access_CardDatProc</STRONG> (Thumb, 1080 bytes, Stack size 40 bytes, access.o(i.Access_CardDatProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = Access_CardDatProc &rArr; ble_dahao_start_advert &rArr; advertising_init &rArr; ble_advertising_init &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dahao_start_advert
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_StorePara
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_WriteRecordFlash
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecordList_StorePara
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encpt_DecrpytExt
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlackList_StorePara
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlackList_Add
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_ComTime
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_DetCardProc
</UL>

<P><STRONG><a name="[a9]"></a>Access_CardProcess</STRONG> (Thumb, 366 bytes, Stack size 24 bytes, access.o(i.Access_CardProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Access_CardProcess &rArr; Proto_UpdateLearnRecord &rArr; Proto_CommHostAckPack &rArr; AES_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_WriteRecordFlash
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proto_UpdateLearnRecord
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_Unlock
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_LightStart
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockKey_Check_CardKey
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_LearnCardOk
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_ComTime
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_DetCardProc
</UL>

<P><STRONG><a name="[a2]"></a>Access_ComTime</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, access.o(i.Access_ComTime))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockKey_Check_PaswdKey
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockKey_Check_CardKey
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_CardProcess
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_CardDatProc
</UL>

<P><STRONG><a name="[ed]"></a>Access_ComTimeLoop</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, access.o(i.Access_ComTimeLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Access_ComTimeLoop
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockKey_Check_PaswdKey
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockKey_Check_CardKey
</UL>

<P><STRONG><a name="[af]"></a>Access_DetCardProc</STRONG> (Thumb, 336 bytes, Stack size 88 bytes, access.o(i.Access_DetCardProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = Access_DetCardProc &rArr; Access_CardDatProc &rArr; ble_dahao_start_advert &rArr; advertising_init &rArr; ble_advertising_init &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carddet_timer_start
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_LightStart
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_UpdateTime
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_CardProcess
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_CardDatProc
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carddet_timer_handler
</UL>

<P><STRONG><a name="[b2]"></a>Access_EraseAllKey</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, access.o(i.Access_EraseAllKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Access_EraseAllKey &rArr; ServeKeyList_Writeflash
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServeKeyList_Writeflash
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlackList_StorePara
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_ParainitFirst
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Parainit
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proto_CommHostUnPackRec
</UL>

<P><STRONG><a name="[b4]"></a>Access_EraseRecordData</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, access.o(i.Access_EraseRecordData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Access_EraseRecordData &rArr; RecordList_StorePara
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecordList_StorePara
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_ParainitFirst
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Parainit
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proto_CommHostUnPackRec
</UL>

<P><STRONG><a name="[b5]"></a>Access_FlashArrang</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, access.o(i.Access_FlashArrang))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Access_FlashArrang &rArr; ServeKeyList_Readflash
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memclr2_6
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServeKeyList_Readflash
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_Init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_CheckGetDynamicFlat
</UL>

<P><STRONG><a name="[105]"></a>Access_GetRecord</STRONG> (Thumb, 130 bytes, Stack size 4 bytes, access.o(i.Access_GetRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Access_GetRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_LoadRecordIn
</UL>

<P><STRONG><a name="[fb]"></a>Access_GetSupportType</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, access.o(i.Access_GetSupportType))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_AddKeyInfo
</UL>

<P><STRONG><a name="[b8]"></a>Access_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, access.o(i.Access_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Access_Init &rArr; BlackList_LoadPara &rArr; BlackList_StorePara
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCommu_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_FlashArrang
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecordList_LoadPara
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlackList_LoadPara
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Init
</UL>

<P><STRONG><a name="[aa]"></a>Access_LearnCardOk</STRONG> (Thumb, 320 bytes, Stack size 32 bytes, access.o(i.Access_LearnCardOk))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Access_LearnCardOk &rArr; ServeKeyList_Writeflash
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServeKeyList_Writeflash
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServeKeyList_Readflash
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlackList_StorePara
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memset4_12
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_CardProcess
</UL>

<P><STRONG><a name="[ab]"></a>Access_LightStart</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, access.o(i.Access_LightStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Access_LightStart
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_DetCardProc
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proto_CommHostUnPackRec
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_Unlock
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_PowerOnIn
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_KeyProc
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_OpenError
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_IoCtlScan
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Infrared_Keyscan
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_CardProcess
</UL>

<P><STRONG><a name="[109]"></a>Access_Lock</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, access.o(i.Access_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Proc
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_PowerOffIn
</UL>

<P><STRONG><a name="[bd]"></a>Access_OpenError</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, access.o(i.Access_OpenError))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Access_OpenError &rArr; Access_LightStart
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_LightStart
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_KeyProc
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_IoCtlScan
</UL>

<P><STRONG><a name="[12f]"></a>Access_TimerProc</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, access.o(i.Access_TimerProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Access_TimerProc
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysBase_timer_handler
</UL>

<P><STRONG><a name="[ae]"></a>Access_Unlock</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, access.o(i.Access_Unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Access_Unlock &rArr; Access_LightStart
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_LightStart
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_TimerProc
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_PowerOnIn
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_KeyProc
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReLay_Keyscan
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_CardProcess
</UL>

<P><STRONG><a name="[a4]"></a>Access_WriteRecordFlash</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, access.o(i.Access_WriteRecordFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Access_WriteRecordFlash &rArr; RecordList_StorePara
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecordList_StorePara
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_CheckGetDynamicHotel_V8
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_CheckGetDynamicFlat
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_CheckGetDynamicDate
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockKey_Check_PaswdKey
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_CardProcess
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_CardDatProc
</UL>

<P><STRONG><a name="[102]"></a>BKDRHash</STRONG> (Thumb, 108 bytes, Stack size 36 bytes, proto_analy.o(i.BKDRHash))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = BKDRHash
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_Init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_HashKeyInit
</UL>

<P><STRONG><a name="[54]"></a>Beep_IoCtl</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, beep.o(i.Beep_IoCtl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Beep_IoCtl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> beep.o(.constdata)
</UL>
<P><STRONG><a name="[52]"></a>Beep_Open</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, beep.o(i.Beep_Open))
<BR>[Address Reference Count : 1]<UL><LI> beep.o(.constdata)
</UL>
<P><STRONG><a name="[53]"></a>Beep_Write</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, beep.o(i.Beep_Write))
<BR>[Address Reference Count : 1]<UL><LI> beep.o(.constdata)
</UL>
<P><STRONG><a name="[a5]"></a>BlackList_Add</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lockkey.o(i.BlackList_Add))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BlackList_Add
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockKey_Remove_VisitCodeKey
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockKey_Remove_PasswordKey
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_CheckGetDynamicFlat
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockKey_Remove_Key
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_RemoveId
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockKey_RemoveKey
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_CardDatProc
</UL>

<P><STRONG><a name="[ba]"></a>BlackList_LoadPara</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, lockkey.o(i.BlackList_LoadPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BlackList_LoadPara &rArr; BlackList_StorePara
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlackList_StorePara
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_Init
</UL>

<P><STRONG><a name="[be]"></a>BlackList_RemoveKey</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, lockkey.o(i.BlackList_RemoveKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BlackList_RemoveKey &rArr; BlackList_StorePara
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlackList_StorePara
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memset4_12
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_AddId
</UL>

<P><STRONG><a name="[a6]"></a>BlackList_StorePara</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, lockkey.o(i.BlackList_StorePara))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BlackList_StorePara
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_EraseAllKey
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockKey_Remove_VisitCodeKey
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockKey_Remove_PasswordKey
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_CheckGetDynamicFlat
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockKey_Remove_Key
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlackList_RemoveKey
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_RemoveId
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockKey_RemoveKey
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockKey_CommPswdId
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockKey_Check_CardKey
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlackList_LoadPara
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_LearnCardOk
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_CardDatProc
</UL>

<P><STRONG><a name="[c0]"></a>BleProc_timer_start</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, main.o(i.BleProc_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BleProc_timer_start &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proto_CommHostPackRec
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCommu_Proc
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proto_UpdateLearnRecord
</UL>

<P><STRONG><a name="[c3]"></a>CalulateCRC</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, rc522.o(i.CalulateCRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = CalulateCRC &rArr; SetBitMask &rArr; WriteRawRC &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRawRC
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBitMask
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRawRC
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelect
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRead
</UL>

<P><STRONG><a name="[b1]"></a>Carddet_timer_start</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, main.o(i.Carddet_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Carddet_timer_start &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_DetCardProc
</UL>

<P><STRONG><a name="[c4]"></a>ClearBitMask</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, rc522.o(i.ClearBitMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ClearBitMask &rArr; WriteRawRC &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRawRC
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRawRC
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522_PowerOn
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_PcdISOType
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelect
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAnticoll
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalulateCRC
</UL>

<P><STRONG><a name="[a1]"></a>Encpt_DecrpytExt</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, encpt.o(i.Encpt_DecrpytExt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Encpt_DecrpytExt
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proto_CommHostUnPackRec
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_ModifyCustomInfo
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_CardDatProc
</UL>

<P><STRONG><a name="[112]"></a>Encpt_EncryptExt</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, encpt.o(i.Encpt_EncryptExt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Encpt_EncryptExt
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_CheckGetDynamicHotel_V8
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_CheckGetDynamicFlat
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_CheckGetDynamicDate
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proto_CommHostAckPack
</UL>

<P><STRONG><a name="[142]"></a>Event_Get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, event.o(i.Event_Get))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_TimerProc
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Proc
</UL>

<P><STRONG><a name="[138]"></a>Event_Init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, event.o(i.Event_Init))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Init
</UL>

<P><STRONG><a name="[143]"></a>Event_Remove</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, event.o(i.Event_Remove))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_TimerProc
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Proc
</UL>

<P><STRONG><a name="[e4]"></a>Event_Set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, event.o(i.Event_Set))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_TimerProc
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_IoCtlScan
</UL>

<P><STRONG><a name="[ca]"></a>Factory_Motor_Test</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, factory.o(i.Factory_Motor_Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Factory_Motor_Test
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Factory_Proc
</UL>

<P><STRONG><a name="[c9]"></a>Factory_Proc</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, factory.o(i.Factory_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Factory_Proc &rArr; ble_dahao_stop_advert &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dahao_stop_advert
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Factory_Motor_Test
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysBase_timer_handler
</UL>

<P><STRONG><a name="[6e]"></a>Flash_Close</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, flash.o(i.Flash_Close))
<BR>[Address Reference Count : 1]<UL><LI> flash.o(.constdata)
</UL>
<P><STRONG><a name="[71]"></a>Flash_IoCtl</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, flash.o(i.Flash_IoCtl))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = Flash_IoCtl &rArr; Flash_SpiBlockErase &rArr; Flash_SpiWaitForWriteEndEx &rArr; Flash_SpiSendByte &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SpiSendByte
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SpiBlockErase
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SpiWaitForWriteEndEx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flash.o(.constdata)
</UL>
<P><STRONG><a name="[6d]"></a>Flash_Open</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, flash.o(i.Flash_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Flash_Open &rArr; Sys_SpiOpen &rArr; nrf_drv_spi_init &rArr; nrf_drv_common_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_SpiOpen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flash.o(.constdata)
</UL>
<P><STRONG><a name="[6f]"></a>Flash_Read</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, flash.o(i.Flash_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Flash_Read &rArr; Flash_SpiSendByte &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_transfer
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SpiSendByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flash.o(.constdata)
</UL>
<P><STRONG><a name="[ce]"></a>Flash_SpiBlockErase</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, flash.o(i.Flash_SpiBlockErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Flash_SpiBlockErase &rArr; Flash_SpiWaitForWriteEndEx &rArr; Flash_SpiSendByte &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SpiSendByte
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SpiWaitForWriteEndEx
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_IoCtl
</UL>

<P><STRONG><a name="[cc]"></a>Flash_SpiSendByte</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, flash.o(i.Flash_SpiSendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Flash_SpiSendByte &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadID
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SpiBlockErase
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_IoCtl
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SpiWaitForWriteEndEx
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SpiPageWrite
</UL>

<P><STRONG><a name="[70]"></a>Flash_Write</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, flash.o(i.Flash_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Flash_Write &rArr; Flash_SpiPageWrite &rArr; Flash_SpiSendByte &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SpiPageWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> flash.o(.constdata)
</UL>
<P><STRONG><a name="[c]"></a>GPIOTE_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.GPIOTE_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[d2]"></a>HC595_Init</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, hc595.o(i.HC595_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HC595_Init &rArr; Sys_SpiOpen &rArr; nrf_drv_spi_init &rArr; nrf_drv_common_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_SpiOpen
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_transfer
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_GenFunhtons
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_GenFunDelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_Open
</UL>

<P><STRONG><a name="[d5]"></a>HC595_LedWriteData</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, hc595.o(i.HC595_LedWriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HC595_LedWriteData &rArr; Sys_SpiOpen &rArr; nrf_drv_spi_init &rArr; nrf_drv_common_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_SpiOpen
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_transfer
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_GenFunhtons
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_GenFunDelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_OkTogg
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_OkOn
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_OkOff
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_NgTogg
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_NgOn
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_NgOff
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_ConnTogg
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_ConnOn
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_ConnOff
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_BattTogg
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_BattOn
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_BattOff
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_AllTogg
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_AllOn
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Light_AllOff
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardDbg_Timepro
</UL>

<P><STRONG><a name="[d6]"></a>HardDbg_Timepro</STRONG> (Thumb, 344 bytes, Stack size 24 bytes, access.o(i.HardDbg_Timepro))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HardDbg_Timepro &rArr; Rtc_Read &rArr; Rtc_ReadNBytes &rArr; I2C_SOFT_Byte_Rx
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendUart_data
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_StorePara
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Read
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadID
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Weigand34
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC595_LedWriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReLay_Timepro
</UL>

<P><STRONG><a name="[da]"></a>I2C_SOFT_Byte_Rx</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, i2c_soft.o(i.I2C_SOFT_Byte_Rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_SOFT_Byte_Rx
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_GenFunDelayUs
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tsmxx_Read_Nyetes
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_ReadNBytes
</UL>

<P><STRONG><a name="[dd]"></a>I2C_SOFT_Byte_Tx</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, i2c_soft.o(i.I2C_SOFT_Byte_Tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_SOFT_Byte_Tx
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_GenFunDelayUs
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tsmxx_Write_Nyetes
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tsmxx_Read_Nyetes
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_WriteNBytes
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_ReadNBytes
</UL>

<P><STRONG><a name="[de]"></a>I2C_SOFT_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, i2c_soft.o(i.I2C_SOFT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_SOFT_Init &rArr; I2C_SOFT_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SOFT_Stop
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tsmxx_Open
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_WlarmSet
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Set
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Open
</UL>

<P><STRONG><a name="[e0]"></a>I2C_SOFT_Start</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, i2c_soft.o(i.I2C_SOFT_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_SOFT_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_GenFunDelayUs
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tsmxx_Write_Nyetes
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tsmxx_Read_Nyetes
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_WriteNBytes
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_ReadNBytes
</UL>

<P><STRONG><a name="[df]"></a>I2C_SOFT_Stop</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, i2c_soft.o(i.I2C_SOFT_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_SOFT_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_GenFunDelayUs
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SOFT_Init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tsmxx_Write_Nyetes
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tsmxx_Read_Nyetes
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_WriteNBytes
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_ReadNBytes
</UL>

<P><STRONG><a name="[e1]"></a>Infrared_Keyscan</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, access.o(i.Infrared_Keyscan))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Infrared_Keyscan &rArr; Access_LightStart
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_LightStart
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReLay_Timepro
</UL>

<P><STRONG><a name="[6a]"></a>Key_Close</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, key.o(i.Key_Close))
<BR>[Address Reference Count : 1]<UL><LI> key.o(.constdata)
</UL>
<P><STRONG><a name="[6c]"></a>Key_IoCtl</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, key.o(i.Key_IoCtl))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Key_IoCtl &rArr; Key_IoCtlScan &rArr; Tsmxx_ReadIndex &rArr; Tsmxx_ReadDat &rArr; Tsmxx_Read_Nyetes &rArr; I2C_SOFT_Byte_Rx
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_IoCtlScan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key.o(.constdata)
</UL>
<P><STRONG><a name="[e2]"></a>Key_IoCtlScan</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, key.o(i.Key_IoCtlScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Key_IoCtlScan &rArr; Tsmxx_ReadIndex &rArr; Tsmxx_ReadDat &rArr; Tsmxx_Read_Nyetes &rArr; I2C_SOFT_Byte_Rx
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event_Set
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_LightStart
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tsmxx_ReadIndex
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_OpenError
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_IoCtl
</UL>

<P><STRONG><a name="[69]"></a>Key_Open</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, key.o(i.Key_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Key_Open &rArr; Touch_Init &rArr; Tsmxx_Open &rArr; Tsm_Init &rArr; Tsmxx_Write_Nyetes &rArr; I2C_SOFT_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key.o(.constdata)
</UL>
<P><STRONG><a name="[6b]"></a>Key_Read</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, key.o(i.Key_Read))
<BR>[Address Reference Count : 1]<UL><LI> key.o(.constdata)
</UL>
<P><STRONG><a name="[85]"></a>Light_AllOff</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, light.o(i.Light_AllOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Light_AllOff &rArr; HC595_LedWriteData &rArr; Sys_SpiOpen &rArr; nrf_drv_spi_init &rArr; nrf_drv_common_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC595_LedWriteData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> light.o(.constdata)
</UL>
<P><STRONG><a name="[84]"></a>Light_AllOn</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, light.o(i.Light_AllOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Light_AllOn &rArr; HC595_LedWriteData &rArr; Sys_SpiOpen &rArr; nrf_drv_spi_init &rArr; nrf_drv_common_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC595_LedWriteData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> light.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>Light_AllTogg</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, light.o(i.Light_AllTogg))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Light_AllTogg &rArr; HC595_LedWriteData &rArr; Sys_SpiOpen &rArr; nrf_drv_spi_init &rArr; nrf_drv_common_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC595_LedWriteData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> light.o(.constdata)
</UL>
<P><STRONG><a name="[79]"></a>Light_BattOff</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, light.o(i.Light_BattOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Light_BattOff &rArr; HC595_LedWriteData &rArr; Sys_SpiOpen &rArr; nrf_drv_spi_init &rArr; nrf_drv_common_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC595_LedWriteData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> light.o(.constdata)
</UL>
<P><STRONG><a name="[78]"></a>Light_BattOn</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, light.o(i.Light_BattOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Light_BattOn &rArr; HC595_LedWriteData &rArr; Sys_SpiOpen &rArr; nrf_drv_spi_init &rArr; nrf_drv_common_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC595_LedWriteData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> light.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>Light_BattTogg</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, light.o(i.Light_BattTogg))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Light_BattTogg &rArr; HC595_LedWriteData &rArr; Sys_SpiOpen &rArr; nrf_drv_spi_init &rArr; nrf_drv_common_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC595_LedWriteData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> light.o(.constdata)
</UL>
<P><STRONG><a name="[7c]"></a>Light_ConnOff</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, light.o(i.Light_ConnOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Light_ConnOff &rArr; HC595_LedWriteData &rArr; Sys_SpiOpen &rArr; nrf_drv_spi_init &rArr; nrf_drv_common_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC595_LedWriteData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> light.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>Light_ConnOn</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, light.o(i.Light_ConnOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Light_ConnOn &rArr; HC595_LedWriteData &rArr; Sys_SpiOpen &rArr; nrf_drv_spi_init &rArr; nrf_drv_common_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC595_LedWriteData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> light.o(.constdata)
</UL>
<P><STRONG><a name="[7d]"></a>Light_ConnTogg</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, light.o(i.Light_ConnTogg))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Light_ConnTogg &rArr; HC595_LedWriteData &rArr; Sys_SpiOpen &rArr; nrf_drv_spi_init &rArr; nrf_drv_common_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC595_LedWriteData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> light.o(.constdata)
</UL>
<P><STRONG><a name="[89]"></a>Light_IoCtl</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, light.o(i.Light_IoCtl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Light_IoCtl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> light.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>Light_NgOff</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, light.o(i.Light_NgOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Light_NgOff &rArr; HC595_LedWriteData &rArr; Sys_SpiOpen &rArr; nrf_drv_spi_init &rArr; nrf_drv_common_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC595_LedWriteData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> light.o(.constdata)
</UL>
<P><STRONG><a name="[81]"></a>Light_NgOn</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, light.o(i.Light_NgOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Light_NgOn &rArr; HC595_LedWriteData &rArr; Sys_SpiOpen &rArr; nrf_drv_spi_init &rArr; nrf_drv_common_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC595_LedWriteData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> light.o(.constdata)
</UL>
<P><STRONG><a name="[83]"></a>Light_NgTogg</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, light.o(i.Light_NgTogg))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Light_NgTogg &rArr; HC595_LedWriteData &rArr; Sys_SpiOpen &rArr; nrf_drv_spi_init &rArr; nrf_drv_common_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC595_LedWriteData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> light.o(.constdata)
</UL>
<P><STRONG><a name="[7f]"></a>Light_OkOff</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, light.o(i.Light_OkOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Light_OkOff &rArr; HC595_LedWriteData &rArr; Sys_SpiOpen &rArr; nrf_drv_spi_init &rArr; nrf_drv_common_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC595_LedWriteData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> light.o(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>Light_OkOn</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, light.o(i.Light_OkOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Light_OkOn &rArr; HC595_LedWriteData &rArr; Sys_SpiOpen &rArr; nrf_drv_spi_init &rArr; nrf_drv_common_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC595_LedWriteData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> light.o(.constdata)
</UL>
<P><STRONG><a name="[80]"></a>Light_OkTogg</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, light.o(i.Light_OkTogg))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Light_OkTogg &rArr; HC595_LedWriteData &rArr; Sys_SpiOpen &rArr; nrf_drv_spi_init &rArr; nrf_drv_common_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC595_LedWriteData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> light.o(.constdata)
</UL>
<P><STRONG><a name="[87]"></a>Light_Open</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, light.o(i.Light_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Light_Open &rArr; HC595_Init &rArr; Sys_SpiOpen &rArr; nrf_drv_spi_init &rArr; nrf_drv_common_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC595_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> light.o(.constdata)
</UL>
<P><STRONG><a name="[88]"></a>Light_Write</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, light.o(i.Light_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Light_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> light.o(.constdata)
</UL>
<P><STRONG><a name="[b9]"></a>LockCommu_Init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lock_commu.o(i.LockCommu_Init))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_Init
</UL>

<P><STRONG><a name="[bf]"></a>LockCommu_Proc</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, lock_commu.o(i.LockCommu_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LockCommu_Proc &rArr; Proto_CommHostUnPackRec &rArr; Proto_CommHostAckPack &rArr; AES_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleProc_timer_start
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proto_CommHostUnPackRec
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_Decrypt
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCommu_TimerProc
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleProc_timer_handler
</UL>

<P><STRONG><a name="[e8]"></a>LockCommu_SendStart</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lock_commu.o(i.LockCommu_SendStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LockCommu_SendStart &rArr; ble_dahao_notify_data
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dahao_notify_data
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proto_NetCommSend
</UL>

<P><STRONG><a name="[e7]"></a>LockCommu_TimerProc</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, lock_commu.o(i.LockCommu_TimerProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LockCommu_TimerProc &rArr; ble_dahao_notify_data
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dahao_notify_data
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCommu_Proc
</UL>

<P><STRONG><a name="[ea]"></a>LockKey_Add_VisitCodeKey</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, lockkey.o(i.LockKey_Add_VisitCodeKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LockKey_Add_VisitCodeKey &rArr; ProtoAnaly_AddId &rArr; BlackList_RemoveKey &rArr; BlackList_StorePara
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_GenFun32To8
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_AddId
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_CheckGetDynamicHotel_V8
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_CheckGetDynamicFlat
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_CheckGetDynamicDate
</UL>

<P><STRONG><a name="[ad]"></a>LockKey_Check_CardKey</STRONG> (Thumb, 302 bytes, Stack size 48 bytes, lockkey.o(i.LockKey_Check_CardKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LockKey_Check_CardKey &rArr; BlackList_StorePara
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlackList_StorePara
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memset4_12
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_ComTimeLoop
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_ComTime
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_CardProcess
</UL>

<P><STRONG><a name="[ee]"></a>LockKey_Check_PaswdKey</STRONG> (Thumb, 170 bytes, Stack size 48 bytes, lockkey.o(i.LockKey_Check_PaswdKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LockKey_Check_PaswdKey &rArr; LockKey_CommPswdId &rArr; ServeKeyList_Writeflash
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_GenFun32To8
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_WriteRecordFlash
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockKey_RemoveKey
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockKey_CommPswdId
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_ComTimeLoop
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_ComTime
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_KeyProc
</UL>

<P><STRONG><a name="[ef]"></a>LockKey_CommPswdId</STRONG> (Thumb, 704 bytes, Stack size 72 bytes, lockkey.o(i.LockKey_CommPswdId))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LockKey_CommPswdId &rArr; ServeKeyList_Writeflash
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServeKeyList_Writeflash
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServeKeyList_Readflash
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlackList_StorePara
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memset4_12
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockKey_Check_PaswdKey
</UL>

<P><STRONG><a name="[f0]"></a>LockKey_RemoveKey</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, lockkey.o(i.LockKey_RemoveKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LockKey_RemoveKey &rArr; ServeKeyList_Writeflash
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServeKeyList_Writeflash
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServeKeyList_Readflash
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlackList_StorePara
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlackList_Add
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockKey_Check_PaswdKey
</UL>

<P><STRONG><a name="[f1]"></a>LockKey_Remove_Key</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, lockkey.o(i.LockKey_Remove_Key))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LockKey_Remove_Key &rArr; ServeKeyList_Writeflash
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServeKeyList_Writeflash
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlackList_StorePara
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlackList_Add
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_DeleteKeyInfo
</UL>

<P><STRONG><a name="[f2]"></a>LockKey_Remove_PasswordKey</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, lockkey.o(i.LockKey_Remove_PasswordKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LockKey_Remove_PasswordKey &rArr; ServeKeyList_Writeflash
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServeKeyList_Writeflash
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlackList_StorePara
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlackList_Add
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_CheckGetDynamicFlat
</UL>

<P><STRONG><a name="[f3]"></a>LockKey_Remove_VisitCodeKey</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, lockkey.o(i.LockKey_Remove_VisitCodeKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LockKey_Remove_VisitCodeKey &rArr; ServeKeyList_Writeflash
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServeKeyList_Writeflash
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlackList_StorePara
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlackList_Add
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_CheckGetDynamicHotel_V8
</UL>

<P><STRONG><a name="[fc]"></a>LockKey_Start_LearnCardKey</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, lockkey.o(i.LockKey_Start_LearnCardKey))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_AddKeyInfo
</UL>

<P><STRONG><a name="[f4]"></a>Main_GetWeekFromDay</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, rtc.o(i.Main_GetWeekFromDay))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Main_GetWeekFromDay &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_UpdateTime
</UL>

<P><STRONG><a name="[f5]"></a>PcdAnticoll</STRONG> (Thumb, 126 bytes, Stack size 88 bytes, rc522.o(i.PcdAnticoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = PcdAnticoll &rArr; PcdComMF522 &rArr; SetBitMask &rArr; WriteRawRC &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRawRC
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522_Ioctl
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522_DetTypeA
</UL>

<P><STRONG><a name="[f7]"></a>PcdAuthState</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, rc522.o(i.PcdAuthState))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = PcdAuthState &rArr; PcdComMF522 &rArr; SetBitMask &rArr; WriteRawRC &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRawRC
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522_Ioctl
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522_DetTypeA
</UL>

<P><STRONG><a name="[f6]"></a>PcdComMF522</STRONG> (Thumb, 304 bytes, Stack size 40 bytes, rc522.o(i.PcdComMF522))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = PcdComMF522 &rArr; SetBitMask &rArr; WriteRawRC &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRawRC
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBitMask
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRawRC
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelect
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRequestA
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRead
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAuthState
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAnticoll
</UL>

<P><STRONG><a name="[f8]"></a>PcdRead</STRONG> (Thumb, 82 bytes, Stack size 48 bytes, rc522.o(i.PcdRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = PcdRead &rArr; PcdComMF522 &rArr; SetBitMask &rArr; WriteRawRC &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalulateCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522_Ioctl
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522_DetTypeA
</UL>

<P><STRONG><a name="[f9]"></a>PcdRequestA</STRONG> (Thumb, 156 bytes, Stack size 56 bytes, rc522.o(i.PcdRequestA))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = PcdRequestA &rArr; PcdComMF522 &rArr; SetBitMask &rArr; WriteRawRC &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRawRC
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRawRC
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522_Ioctl
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522_DetTypeA
</UL>

<P><STRONG><a name="[fa]"></a>PcdSelect</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, rc522.o(i.PcdSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = PcdSelect &rArr; PcdComMF522 &rArr; SetBitMask &rArr; WriteRawRC &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalulateCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522_Ioctl
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522_DetTypeA
</UL>

<P><STRONG><a name="[ec]"></a>ProtoAnaly_AddId</STRONG> (Thumb, 374 bytes, Stack size 40 bytes, proto_analy.o(i.ProtoAnaly_AddId))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ProtoAnaly_AddId &rArr; BlackList_RemoveKey &rArr; BlackList_StorePara
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServeKeyList_Writeflash
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServeKeyList_Readflash
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlackList_RemoveKey
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockKey_Add_VisitCodeKey
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_SetListIn
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_AddKeyInfo
</UL>

<P><STRONG><a name="[60]"></a>ProtoAnaly_AddKeyInfo</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, proto_analy.o(i.ProtoAnaly_AddKeyInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ProtoAnaly_AddKeyInfo &rArr; ProtoAnaly_AddId &rArr; BlackList_RemoveKey &rArr; BlackList_StorePara
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockKey_Start_LearnCardKey
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_GetSupportType
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_BeepStart
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_AddId
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proto_analy.o(.constdata)
</UL>
<P><STRONG><a name="[fe]"></a>ProtoAnaly_CheckTime</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, proto_analy.o(i.ProtoAnaly_CheckTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ProtoAnaly_CheckTime &rArr; ProtoAnaly_UpdateTime &rArr; Rtc_Read &rArr; Rtc_ReadNBytes &rArr; I2C_SOFT_Byte_Rx
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Ioctl
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_UpdateTime
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_PowerOnIn
</UL>

<P><STRONG><a name="[23]"></a>ProtoAnaly_CmdAppProc</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, proto_analy.o(i.ProtoAnaly_CmdAppProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ProtoAnaly_CmdAppProc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proto_analy.o(i.ProtoAnaly_Init)
</UL>
<P><STRONG><a name="[24]"></a>ProtoAnaly_CmdMacProc</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, proto_analy.o(i.ProtoAnaly_CmdMacProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ProtoAnaly_CmdMacProc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proto_analy.o(i.ProtoAnaly_Init)
</UL>
<P><STRONG><a name="[66]"></a>ProtoAnaly_ConfigDeviceExtIn</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, proto_analy.o(i.ProtoAnaly_ConfigDeviceExtIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ProtoAnaly_ConfigDeviceExtIn &rArr; Access_BeepStart
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_BeepStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proto_analy.o(.constdata)
</UL>
<P><STRONG><a name="[61]"></a>ProtoAnaly_DeleteKeyInfo</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, proto_analy.o(i.ProtoAnaly_DeleteKeyInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ProtoAnaly_DeleteKeyInfo &rArr; LockKey_Remove_Key &rArr; ServeKeyList_Writeflash
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockKey_Remove_Key
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_BeepStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proto_analy.o(.constdata)
</UL>
<P><STRONG><a name="[26]"></a>ProtoAnaly_EthAckOk</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, proto_analy.o(i.ProtoAnaly_EthAckOk))
<BR>[Address Reference Count : 1]<UL><LI> proto_analy.o(i.ProtoAnaly_Init)
</UL>
<P><STRONG><a name="[68]"></a>ProtoAnaly_FactoryTest</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, proto_analy.o(i.ProtoAnaly_FactoryTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ProtoAnaly_FactoryTest &rArr; Sys_ParainitFirst &rArr; Access_EraseAllKey &rArr; ServeKeyList_Writeflash
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_StorePara
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_ParainitFirst
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_BeepStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proto_analy.o(.constdata)
</UL>
<P><STRONG><a name="[5c]"></a>ProtoAnaly_GetTimeIn</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, proto_analy.o(i.ProtoAnaly_GetTimeIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ProtoAnaly_GetTimeIn &rArr; ProtoAnaly_UpdateTime &rArr; Rtc_Read &rArr; Rtc_ReadNBytes &rArr; I2C_SOFT_Byte_Rx
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_BeepStart
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_UpdateTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proto_analy.o(.constdata)
</UL>
<P><STRONG><a name="[100]"></a>ProtoAnaly_HashKeyInit</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, proto_analy.o(i.ProtoAnaly_HashKeyInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ProtoAnaly_HashKeyInit &rArr; BKDRHash
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_GenFun32To8
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKDRHash
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proto_CommHostUnPackRec
</UL>

<P><STRONG><a name="[103]"></a>ProtoAnaly_Init</STRONG> (Thumb, 80 bytes, Stack size 48 bytes, proto_analy.o(i.ProtoAnaly_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ProtoAnaly_Init &rArr; BKDRHash
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_GenFun32To8
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proto_CommPrackInit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKDRHash
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Init
</UL>

<P><STRONG><a name="[5e]"></a>ProtoAnaly_LoadRecordIn</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, proto_analy.o(i.ProtoAnaly_LoadRecordIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ProtoAnaly_LoadRecordIn &rArr; RecordList_StorePara
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecordList_StorePara
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_GetRecord
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proto_analy.o(.constdata)
</UL>
<P><STRONG><a name="[106]"></a>ProtoAnaly_ModifyCustomInfo</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, proto_analy.o(i.ProtoAnaly_ModifyCustomInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ProtoAnaly_ModifyCustomInfo &rArr; Encpt_DecrpytExt
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_GenFun8To32
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_StorePara
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encpt_DecrpytExt
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_BeepStart
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy1_8
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proto_CommHostPackRec
</UL>

<P><STRONG><a name="[58]"></a>ProtoAnaly_ModifyPaswdIn</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, proto_analy.o(i.ProtoAnaly_ModifyPaswdIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ProtoAnaly_ModifyPaswdIn &rArr; Sys_StorePara
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_StorePara
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_BeepStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proto_analy.o(.constdata)
</UL>
<P><STRONG><a name="[5a]"></a>ProtoAnaly_PowerOffIn</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, proto_analy.o(i.ProtoAnaly_PowerOffIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ProtoAnaly_PowerOffIn
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_Lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proto_analy.o(.constdata)
</UL>
<P><STRONG><a name="[59]"></a>ProtoAnaly_PowerOnIn</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, proto_analy.o(i.ProtoAnaly_PowerOnIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ProtoAnaly_PowerOnIn &rArr; ProtoAnaly_CheckTime &rArr; ProtoAnaly_UpdateTime &rArr; Rtc_Read &rArr; Rtc_ReadNBytes &rArr; I2C_SOFT_Byte_Rx
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_Unlock
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_LightStart
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_BeepStart
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_CheckTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proto_analy.o(.constdata)
</UL>
<P><STRONG><a name="[25]"></a>ProtoAnaly_ProcEnd</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, proto_analy.o(i.ProtoAnaly_ProcEnd))
<BR>[Address Reference Count : 1]<UL><LI> proto_analy.o(i.ProtoAnaly_Init)
</UL>
<P><STRONG><a name="[27]"></a>ProtoAnaly_PublicProc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, proto_analy.o(i.ProtoAnaly_PublicProc))
<BR>[Address Reference Count : 1]<UL><LI> proto_analy.o(i.ProtoAnaly_Init)
</UL>
<P><STRONG><a name="[65]"></a>ProtoAnaly_ReadDeviceInfoExtIn</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, proto_analy.o(i.ProtoAnaly_ReadDeviceInfoExtIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ProtoAnaly_ReadDeviceInfoExtIn &rArr; Access_BeepStart
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_BeepStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proto_analy.o(.constdata)
</UL>
<P><STRONG><a name="[5f]"></a>ProtoAnaly_ReadKeyInfo</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, proto_analy.o(i.ProtoAnaly_ReadKeyInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ProtoAnaly_ReadKeyInfo &rArr; Access_BeepStart
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_BeepStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proto_analy.o(.constdata)
</UL>
<P><STRONG><a name="[67]"></a>ProtoAnaly_ReadVerSionIn</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, proto_analy.o(i.ProtoAnaly_ReadVerSionIn))
<BR>[Address Reference Count : 1]<UL><LI> proto_analy.o(.constdata)
</UL>
<P><STRONG><a name="[5d]"></a>ProtoAnaly_RecordAckIn</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, proto_analy.o(i.ProtoAnaly_RecordAckIn))
<BR>[Address Reference Count : 1]<UL><LI> proto_analy.o(.constdata)
</UL>
<P><STRONG><a name="[10a]"></a>ProtoAnaly_RemoveId</STRONG> (Thumb, 344 bytes, Stack size 24 bytes, proto_analy.o(i.ProtoAnaly_RemoveId))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ProtoAnaly_RemoveId &rArr; ProtoAnaly_UpdateTime &rArr; Rtc_Read &rArr; Rtc_ReadNBytes &rArr; I2C_SOFT_Byte_Rx
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServeKeyList_Writeflash
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServeKeyList_Readflash
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlackList_StorePara
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlackList_Add
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_UpdateTime
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_RomveIdin
</UL>

<P><STRONG><a name="[63]"></a>ProtoAnaly_RomveIdin</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, proto_analy.o(i.ProtoAnaly_RomveIdin))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ProtoAnaly_RomveIdin &rArr; ProtoAnaly_RemoveId &rArr; ProtoAnaly_UpdateTime &rArr; Rtc_Read &rArr; Rtc_ReadNBytes &rArr; I2C_SOFT_Byte_Rx
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_BeepStart
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_RemoveId
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proto_analy.o(.constdata)
</UL>
<P><STRONG><a name="[62]"></a>ProtoAnaly_SetListIn</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, proto_analy.o(i.ProtoAnaly_SetListIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ProtoAnaly_SetListIn &rArr; ProtoAnaly_AddId &rArr; BlackList_RemoveKey &rArr; BlackList_StorePara
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_BeepStart
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_AddId
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proto_analy.o(.constdata)
</UL>
<P><STRONG><a name="[57]"></a>ProtoAnaly_SetParaDefIn</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, proto_analy.o(i.ProtoAnaly_SetParaDefIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ProtoAnaly_SetParaDefIn &rArr; Sys_Parainit &rArr; Access_EraseAllKey &rArr; ServeKeyList_Writeflash
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_StorePara
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Parainit
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_BeepStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proto_analy.o(.constdata)
</UL>
<P><STRONG><a name="[5b]"></a>ProtoAnaly_SetTimeIn</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, proto_analy.o(i.ProtoAnaly_SetTimeIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ProtoAnaly_SetTimeIn &rArr; Rtc_Ioctl &rArr; Rtc_WlarmSet &rArr; Rtc_ReadNBytes &rArr; I2C_SOFT_Byte_Rx
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Ioctl
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_BeepStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> proto_analy.o(.constdata)
</UL>
<P><STRONG><a name="[64]"></a>ProtoAnaly_SetTouchSenvedin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, proto_analy.o(i.ProtoAnaly_SetTouchSenvedin))
<BR>[Address Reference Count : 1]<UL><LI> proto_analy.o(.constdata)
</UL>
<P><STRONG><a name="[b0]"></a>ProtoAnaly_UpdateTime</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, proto_analy.o(i.ProtoAnaly_UpdateTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ProtoAnaly_UpdateTime &rArr; Rtc_Read &rArr; Rtc_ReadNBytes &rArr; I2C_SOFT_Byte_Rx
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_7
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Read
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_GetWeekFromDay
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_DetCardProc
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proto_CommHostUnPackRec
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_RemoveId
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_GetTimeIn
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_CheckTime
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_KeyProc
</UL>

<P><STRONG><a name="[10d]"></a>Proto_CommHostAckPack</STRONG> (Thumb, 326 bytes, Stack size 40 bytes, proto_commpack.o(i.Proto_CommHostAckPack))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Proto_CommHostAckPack &rArr; AES_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_GenFunChecksum
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_GenFun32To8
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_GenFun16To8
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proto_NetCommSend
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_Encrypt
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encpt_EncryptExt
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy1_8
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proto_CommHostUnPackRec
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proto_UpdateLearnRecord
</UL>

<P><STRONG><a name="[113]"></a>Proto_CommHostPackRec</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, proto_commpack.o(i.Proto_CommHostPackRec))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Proto_CommHostPackRec &rArr; BleProc_timer_start &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleProc_timer_start
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_ModifyCustomInfo
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dahao_on_ble_evt
</UL>

<P><STRONG><a name="[e6]"></a>Proto_CommHostUnPackRec</STRONG> (Thumb, 560 bytes, Stack size 48 bytes, proto_commpack.o(i.Proto_CommHostUnPackRec))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Proto_CommHostUnPackRec &rArr; Proto_CommHostAckPack &rArr; AES_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_GenFunChecksum
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_GenFun8To32
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_GenFun8To16
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_GenFun32To8
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_EraseRecordData
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_EraseAllKey
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memclr2_6
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_StorePara
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proto_CommHostAckPack
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encpt_DecrpytExt
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_LightStart
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_BeepStart
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy1_8
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_UpdateTime
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_HashKeyInit
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCommu_Proc
</UL>

<P><STRONG><a name="[104]"></a>Proto_CommPrackInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, proto_commpack.o(i.Proto_CommPrackInit))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_Init
</UL>

<P><STRONG><a name="[110]"></a>Proto_NetCommSend</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, proto_netcomm.o(i.Proto_NetCommSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Proto_NetCommSend &rArr; LockCommu_SendStart &rArr; ble_dahao_notify_data
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCommu_SendStart
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proto_CommHostAckPack
</UL>

<P><STRONG><a name="[ac]"></a>Proto_UpdateLearnRecord</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, proto_commpack.o(i.Proto_UpdateLearnRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Proto_UpdateLearnRecord &rArr; Proto_CommHostAckPack &rArr; AES_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleProc_timer_start
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proto_CommHostAckPack
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_CardProcess
</UL>

<P><STRONG><a name="[116]"></a>PwmUser_SetPameterBuzz</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, pwm.o(i.PwmUser_SetPameterBuzz))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = PwmUser_SetPameterBuzz &rArr; app_pwm_init &rArr; app_pwm_channel_duty_ticks_set &rArr; nrf_drv_ppi_channels_remove_from_group &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_uninit
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_enable
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_channel_duty_set
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwm_IoCtl
</UL>

<P><STRONG><a name="[56]"></a>Pwm_IoCtl</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, pwm.o(i.Pwm_IoCtl))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Pwm_IoCtl &rArr; PwmUser_SetPameterBuzz &rArr; app_pwm_init &rArr; app_pwm_channel_duty_ticks_set &rArr; nrf_drv_ppi_channels_remove_from_group &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_disable
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmUser_SetPameterBuzz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm.o(.constdata)
</UL>
<P><STRONG><a name="[55]"></a>Pwm_Open</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pwm.o(i.Pwm_Open))
<BR>[Address Reference Count : 1]<UL><LI> pwm.o(.constdata)
</UL>
<P><STRONG><a name="[11c]"></a>RC_PcdISOType</STRONG> (Thumb, 448 bytes, Stack size 16 bytes, rc522.o(i.RC_PcdISOType))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = RC_PcdISOType &rArr; Rc522_PowerOn &rArr; ClearBitMask &rArr; WriteRawRC &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_GenFunDelayUs
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_GenFunDelayMs
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRawRC
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBitMask
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRawRC
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522_PowerOn
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522_Ioctl
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522_DetTypeA
</UL>

<P><STRONG><a name="[17]"></a>RTC1_IRQHandler</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, app_timer.o(i.RTC1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RTC1_IRQHandler &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[11f]"></a>Rc522_DetTypeA</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, rc522.o(i.Rc522_DetTypeA))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = Rc522_DetTypeA &rArr; PcdAnticoll &rArr; PcdComMF522 &rArr; SetBitMask &rArr; WriteRawRC &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_PcdISOType
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelect
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRequestA
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRead
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAuthState
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAnticoll
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522_Read
</UL>

<P><STRONG><a name="[74]"></a>Rc522_Ioctl</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, rc522.o(i.Rc522_Ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = Rc522_Ioctl &rArr; PcdAnticoll &rArr; PcdComMF522 &rArr; SetBitMask &rArr; WriteRawRC &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_PcdISOType
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelect
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRequestA
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRead
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAuthState
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAnticoll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rc522.o(.constdata)
</UL>
<P><STRONG><a name="[72]"></a>Rc522_Open</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rc522.o(i.Rc522_Open))
<BR>[Address Reference Count : 1]<UL><LI> rc522.o(.constdata)
</UL>
<P><STRONG><a name="[11d]"></a>Rc522_PowerOn</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, rc522.o(i.Rc522_PowerOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Rc522_PowerOn &rArr; ClearBitMask &rArr; WriteRawRC &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_GenFunDelayUs
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRawRC
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRawRC
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522_Read
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_PcdISOType
</UL>

<P><STRONG><a name="[73]"></a>Rc522_Read</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rc522.o(i.Rc522_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = Rc522_Read &rArr; Rc522_DetTypeA &rArr; PcdAnticoll &rArr; PcdComMF522 &rArr; SetBitMask &rArr; WriteRawRC &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522_PowerOn
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522_DetTypeA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rc522.o(.constdata)
</UL>
<P><STRONG><a name="[120]"></a>ReLay_Keyscan</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, access.o(i.ReLay_Keyscan))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ReLay_Keyscan &rArr; Access_Unlock &rArr; Access_LightStart
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReLay_Timepro
</UL>

<P><STRONG><a name="[121]"></a>ReLay_Timepro</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, access.o(i.ReLay_Timepro))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ReLay_Timepro &rArr; HardDbg_Timepro &rArr; Rtc_Read &rArr; Rtc_ReadNBytes &rArr; I2C_SOFT_Byte_Rx
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReLay_Keyscan
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Infrared_Keyscan
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardDbg_Timepro
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysBase_timer_handler
</UL>

<P><STRONG><a name="[c7]"></a>ReadRawRC</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, rc522.o(i.ReadRawRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ReadRawRC &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBitMask
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522_PowerOn
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_PcdISOType
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRequestA
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAuthState
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalulateCRC
</UL>

<P><STRONG><a name="[bb]"></a>RecordList_LoadPara</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, lockkey.o(i.RecordList_LoadPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RecordList_LoadPara
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_Init
</UL>

<P><STRONG><a name="[a3]"></a>RecordList_StorePara</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, lockkey.o(i.RecordList_StorePara))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RecordList_StorePara
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_EraseRecordData
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_WriteRecordFlash
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Ioctl
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_LoadRecordIn
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Open
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_CardDatProc
</UL>

<P><STRONG><a name="[77]"></a>Rtc_Ioctl</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rtc.o(i.Rtc_Ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Rtc_Ioctl &rArr; Rtc_WlarmSet &rArr; Rtc_ReadNBytes &rArr; I2C_SOFT_Byte_Rx
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecordList_StorePara
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_WlarmSet
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_SetTimeIn
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_CheckTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>Rtc_Open</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, rtc.o(i.Rtc_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Rtc_Open &rArr; Rtc_Read &rArr; Rtc_ReadNBytes &rArr; I2C_SOFT_Byte_Rx
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Read
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecordList_StorePara
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_BeepStart
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SOFT_Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_WriteNBytes
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Set
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc.o(.constdata)
</UL>
<P><STRONG><a name="[76]"></a>Rtc_Read</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, rtc.o(i.Rtc_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Rtc_Read &rArr; Rtc_ReadNBytes &rArr; I2C_SOFT_Byte_Rx
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_SwapByte
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_ReadNBytes
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_UpdateTime
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Open
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardDbg_Timepro
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc.o(.constdata)
</UL>
<P><STRONG><a name="[126]"></a>Rtc_ReadNBytes</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, rtc.o(i.Rtc_ReadNBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Rtc_ReadNBytes &rArr; I2C_SOFT_Byte_Rx
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SOFT_Stop
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SOFT_Start
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SOFT_Byte_Tx
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SOFT_Byte_Rx
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Read
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_WlarmSet
</UL>

<P><STRONG><a name="[122]"></a>Rtc_Set</STRONG> (Thumb, 298 bytes, Stack size 32 bytes, rtc.o(i.Rtc_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Rtc_Set &rArr; Rtc_WriteNBytes &rArr; I2C_SOFT_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SOFT_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_WriteNBytes
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_SwapByte
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Ioctl
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Open
</UL>

<P><STRONG><a name="[127]"></a>Rtc_SwapByte</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, rtc.o(i.Rtc_SwapByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Rtc_SwapByte
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Read
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_WlarmSet
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Set
</UL>

<P><STRONG><a name="[123]"></a>Rtc_WlarmSet</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, rtc.o(i.Rtc_WlarmSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Rtc_WlarmSet &rArr; Rtc_ReadNBytes &rArr; I2C_SOFT_Byte_Rx
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SOFT_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_WriteNBytes
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_SwapByte
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_ReadNBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Ioctl
</UL>

<P><STRONG><a name="[124]"></a>Rtc_WriteNBytes</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, rtc.o(i.Rtc_WriteNBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Rtc_WriteNBytes &rArr; I2C_SOFT_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SOFT_Stop
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SOFT_Start
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SOFT_Byte_Tx
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_WlarmSet
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Set
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Open
</UL>

<P><STRONG><a name="[a]"></a>SPI0_TWI0_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, nrf_drv_spi.o(i.SPI0_TWI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SPI0_TWI0_IRQHandler &rArr; transfer_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer_byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[d9]"></a>SPI_FLASH_ReadID</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, flash.o(i.SPI_FLASH_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SPI_FLASH_ReadID &rArr; Flash_SpiSendByte &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SpiSendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardDbg_Timepro
</UL>

<P><STRONG><a name="[1a]"></a>SWI0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_timer.o(i.SWI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SWI0_IRQHandler &rArr; timer_list_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SWI2_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, softdevice_handler.o(i.SWI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SWI2_IRQHandler &rArr; intern_softdevice_events_execute &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intern_softdevice_events_execute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[d7]"></a>SendUart_data</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, main.o(i.SendUart_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SendUart_data &rArr; app_uart_put &rArr; nrf_drv_uart_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardDbg_Timepro
</UL>

<P><STRONG><a name="[d8]"></a>Send_Weigand34</STRONG> (Thumb, 302 bytes, Stack size 24 bytes, tsmxx_irq.o(i.Send_Weigand34))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Send_Weigand34
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_GenFunDelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardDbg_Timepro
</UL>

<P><STRONG><a name="[b7]"></a>ServeKeyList_Readflash</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lockkey.o(i.ServeKeyList_Readflash))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ServeKeyList_Readflash
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_FlashArrang
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_RemoveId
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_AddId
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockKey_RemoveKey
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockKey_CommPswdId
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_LearnCardOk
</UL>

<P><STRONG><a name="[b3]"></a>ServeKeyList_Writeflash</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lockkey.o(i.ServeKeyList_Writeflash))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ServeKeyList_Writeflash
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_EraseAllKey
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockKey_Remove_VisitCodeKey
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockKey_Remove_PasswordKey
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockKey_Remove_Key
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_RemoveId
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_AddId
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockKey_RemoveKey
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockKey_CommPswdId
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_LearnCardOk
</UL>

<P><STRONG><a name="[c6]"></a>SetBitMask</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, rc522.o(i.SetBitMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SetBitMask &rArr; WriteRawRC &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRawRC
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRawRC
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_PcdISOType
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalulateCRC
</UL>

<P><STRONG><a name="[131]"></a>SysBasetimer_Start</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, main.o(i.SysBasetimer_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SysBasetimer_Start &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysBase_timer_handler
</UL>

<P><STRONG><a name="[10e]"></a>Sys_GenFun16To8</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_genfun.o(i.Sys_GenFun16To8))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proto_CommHostAckPack
</UL>

<P><STRONG><a name="[eb]"></a>Sys_GenFun32To8</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sys_genfun.o(i.Sys_GenFun32To8))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proto_CommHostUnPackRec
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockKey_Add_VisitCodeKey
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_CheckGetDynamicHotel_V8
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_CheckGetDynamicFlat
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_CheckGetDynamicDate
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proto_CommHostAckPack
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_HashKeyInit
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockKey_Check_PaswdKey
</UL>

<P><STRONG><a name="[115]"></a>Sys_GenFun8To16</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sys_genfun.o(i.Sys_GenFun8To16))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proto_CommHostUnPackRec
</UL>

<P><STRONG><a name="[108]"></a>Sys_GenFun8To32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sys_genfun.o(i.Sys_GenFun8To32))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proto_CommHostUnPackRec
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_ModifyCustomInfo
</UL>

<P><STRONG><a name="[10f]"></a>Sys_GenFunChecksum</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sys_genfun.o(i.Sys_GenFunChecksum))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proto_CommHostUnPackRec
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proto_CommHostAckPack
</UL>

<P><STRONG><a name="[11e]"></a>Sys_GenFunDelayMs</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sys_genfun.o(i.Sys_GenFunDelayMs))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_LoadPara
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_PcdISOType
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tsmxx_Open
</UL>

<P><STRONG><a name="[d3]"></a>Sys_GenFunDelayUs</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sys_genfun.o(i.Sys_GenFunDelayUs))
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_GenFunDelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_GenFunDelayUs
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522_PowerOn
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_PcdISOType
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Weigand34
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SOFT_Stop
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SOFT_Start
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SOFT_Byte_Tx
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SOFT_Byte_Rx
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tsmxx_ReadDat
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC595_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC595_LedWriteData
</UL>

<P><STRONG><a name="[d4]"></a>Sys_GenFunhtons</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, sys_genfun.o(i.Sys_GenFunhtons))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Sys_GenFunhtons
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC595_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC595_LedWriteData
</UL>

<P><STRONG><a name="[132]"></a>Sys_Init</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, sys.o(i.Sys_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Sys_Init &rArr; uart_init &rArr; app_uart_init &rArr; nrf_drv_uart_init &rArr; nrf_drv_common_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wiegand_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_GenFunDelayMs
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_Init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_Init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_LoadPara
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_IoStartUp
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[133]"></a>Sys_IoStartUp</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys.o(i.Sys_IoStartUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sys_IoStartUp
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Init
</UL>

<P><STRONG><a name="[137]"></a>Sys_LoadPara</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, sys.o(i.Sys_LoadPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Sys_LoadPara &rArr; Sys_ParainitFirst &rArr; Access_EraseAllKey &rArr; ServeKeyList_Writeflash
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_GenFunDelayMs
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_StorePara
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_ParainitFirst
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Init
</UL>

<P><STRONG><a name="[10b]"></a>Sys_Parainit</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, sys.o(i.Sys_Parainit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Sys_Parainit &rArr; Access_EraseAllKey &rArr; ServeKeyList_Writeflash
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_EraseRecordData
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_EraseAllKey
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memclr2_6
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_SetParaDefIn
</UL>

<P><STRONG><a name="[ff]"></a>Sys_ParainitFirst</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, sys.o(i.Sys_ParainitFirst))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Sys_ParainitFirst &rArr; Access_EraseAllKey &rArr; ServeKeyList_Writeflash
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_EraseRecordData
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_EraseAllKey
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memclr2_6
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_LoadPara
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_FactoryTest
</UL>

<P><STRONG><a name="[130]"></a>Sys_RestProc</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, sys.o(i.Sys_RestProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Sys_RestProc &rArr; Sys_StorePara
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_StorePara
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysBase_timer_handler
</UL>

<P><STRONG><a name="[c8]"></a>Sys_SpiOpen</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, sys.o(i.Sys_SpiOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Sys_SpiOpen &rArr; nrf_drv_spi_init &rArr; nrf_drv_common_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carddet_timer_handler
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Open
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC595_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC595_LedWriteData
</UL>

<P><STRONG><a name="[a8]"></a>Sys_StorePara</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, sys.o(i.Sys_StorePara))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Sys_StorePara
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_RestProc
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_LoadPara
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proto_CommHostUnPackRec
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_CheckGetDynamicHotel_V8
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_CheckGetDynamicFlat
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_SetParaDefIn
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_ModifyPaswdIn
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_ModifyCustomInfo
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_FactoryTest
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardDbg_Timepro
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_CardDatProc
</UL>

<P><STRONG><a name="[13a]"></a>Sys_TimeBaseX64ms</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sys_timebase.o(i.Sys_TimeBaseX64ms))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
</UL>

<P><STRONG><a name="[13b]"></a>Sys_TimeBaseX64msTask</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, sys_timebase.o(i.Sys_TimeBaseX64msTask))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
</UL>

<P><STRONG><a name="[188]"></a>Sys_wdt_feed</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sys.o(i.Sys_wdt_feed))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_on_ble_evt
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b8]"></a>Sys_wdt_start</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys.o(i.Sys_wdt_start))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[21]"></a>SystemInit</STRONG> (Thumb, 176 bytes, Stack size 0 bytes, system_nrf51.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(.text)
</UL>
<P><STRONG><a name="[e]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, nrf_drv_timer.o(i.TIMER0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIMER0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sys_timebaseirq.o(i.TIMER2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_TimeBaseX64msTask
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_TimeBaseX64ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[e5]"></a>Touch_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, touch.o(i.Touch_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Touch_Init &rArr; Tsmxx_Open &rArr; Tsm_Init &rArr; Tsmxx_Write_Nyetes &rArr; I2C_SOFT_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tsmxx_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Open
</UL>

<P><STRONG><a name="[13d]"></a>Touch_KeyProc</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, touch.o(i.Touch_KeyProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Touch_KeyProc &rArr; sys_CheckGetDynamicHotel_V8 &rArr; LockKey_Add_VisitCodeKey &rArr; ProtoAnaly_AddId &rArr; BlackList_RemoveKey &rArr; BlackList_StorePara
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_CheckGetDynamicHotel_V8
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_CheckGetDynamicFlat
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_CheckGetDynamicDate
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_Unlock
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_LightStart
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_BeepStart
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_UpdateTime
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockKey_Check_PaswdKey
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_OpenError
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Proc
</UL>

<P><STRONG><a name="[12d]"></a>Touch_Proc</STRONG> (Thumb, 524 bytes, Stack size 24 bytes, touch.o(i.Touch_Proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = Touch_Proc &rArr; ble_dahao_start_advert &rArr; advertising_init &rArr; ble_advertising_init &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dahao_start_advert
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event_Remove
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event_Get
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_Lock
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_BeepStart
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_KeyProc
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysBase_timer_handler
</UL>

<P><STRONG><a name="[12c]"></a>Touch_TimerProc</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, touch.o(i.Touch_TimerProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = Touch_TimerProc &rArr; ble_dahao_start_advert &rArr; advertising_init &rArr; ble_advertising_init &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dahao_start_advert
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event_Set
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event_Remove
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event_Get
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_Unlock
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_BeepStart
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysBase_timer_handler
</UL>

<P><STRONG><a name="[144]"></a>Tsm_Init</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, tsmxx.o(i.Tsm_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Tsm_Init &rArr; Tsmxx_Write_Nyetes &rArr; I2C_SOFT_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tsmxx_Write_Nyetes
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tsmxx_Open
</UL>

<P><STRONG><a name="[146]"></a>Tsmxx_Irq_Init</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, tsmxx_irq.o(i.Tsmxx_Irq_Init))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tsmxx_Open
</UL>

<P><STRONG><a name="[13c]"></a>Tsmxx_Open</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, tsmxx.o(i.Tsmxx_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Tsmxx_Open &rArr; Tsm_Init &rArr; Tsmxx_Write_Nyetes &rArr; I2C_SOFT_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_GenFunDelayMs
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tsmxx_Irq_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SOFT_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tsm_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Init
</UL>

<P><STRONG><a name="[147]"></a>Tsmxx_ReadDat</STRONG> (Thumb, 500 bytes, Stack size 24 bytes, tsmxx.o(i.Tsmxx_ReadDat))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Tsmxx_ReadDat &rArr; Tsmxx_Read_Nyetes &rArr; I2C_SOFT_Byte_Rx
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_GenFunDelayUs
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tsmxx_Read_Nyetes
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tsmxx_ReadIndex
</UL>

<P><STRONG><a name="[e3]"></a>Tsmxx_ReadIndex</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tsmxx.o(i.Tsmxx_ReadIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Tsmxx_ReadIndex &rArr; Tsmxx_ReadDat &rArr; Tsmxx_Read_Nyetes &rArr; I2C_SOFT_Byte_Rx
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tsmxx_ReadDat
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_IoCtlScan
</UL>

<P><STRONG><a name="[148]"></a>Tsmxx_Read_Nyetes</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, tsmxx.o(i.Tsmxx_Read_Nyetes))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Tsmxx_Read_Nyetes &rArr; I2C_SOFT_Byte_Rx
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SOFT_Stop
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SOFT_Start
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SOFT_Byte_Tx
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SOFT_Byte_Rx
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tsmxx_ReadDat
</UL>

<P><STRONG><a name="[145]"></a>Tsmxx_Write_Nyetes</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, tsmxx.o(i.Tsmxx_Write_Nyetes))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Tsmxx_Write_Nyetes &rArr; I2C_SOFT_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SOFT_Stop
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SOFT_Start
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SOFT_Byte_Tx
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tsm_Init
</UL>

<P><STRONG><a name="[9]"></a>UART0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nrf_drv_uart.o(i.UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART0_IRQHandler &rArr; uart_irq_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf51.o(RESET)
</UL>
<P><STRONG><a name="[134]"></a>Wiegand_Init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tsmxx_irq.o(i.Wiegand_Init))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Init
</UL>

<P><STRONG><a name="[c5]"></a>WriteRawRC</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, rc522.o(i.WriteRawRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = WriteRawRC &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBitMask
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rc522_PowerOn
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_PcdISOType
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRequestA
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAnticoll
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalulateCRC
</UL>

<P><STRONG><a name="[1b4]"></a>__ARM_common_memclr1_5</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(i.__ARM_common_memclr1_5))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a6]"></a>__ARM_common_memclr1_6</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, device_manager_peripheral.o(i.__ARM_common_memclr1_6))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_instance_init
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_init
</UL>

<P><STRONG><a name="[b6]"></a>__ARM_common_memclr2_6</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sys.o(i.__ARM_common_memclr2_6))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_ParainitFirst
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Parainit
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proto_CommHostUnPackRec
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_FlashArrang
</UL>

<P><STRONG><a name="[1a4]"></a>__ARM_common_memclr2_7</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, device_manager_peripheral.o(i.__ARM_common_memclr2_7))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_init
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
</UL>

<P><STRONG><a name="[178]"></a>__ARM_common_memclr4_7</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ble_advertising.o(i.__ARM_common_memclr4_7))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
</UL>

<P><STRONG><a name="[1a9]"></a>__ARM_common_memcpy1_5</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, device_manager_peripheral.o(i.__ARM_common_memcpy1_5))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_register
</UL>

<P><STRONG><a name="[14b]"></a>__ARM_common_memcpy1_6</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ble_advdata.o(i.__ARM_common_memcpy1_6))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dahao_get_manual_data
</UL>

<P><STRONG><a name="[107]"></a>__ARM_common_memcpy1_8</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, proto_analy.o(i.__ARM_common_memcpy1_8))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proto_CommHostUnPackRec
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proto_CommHostAckPack
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_ModifyCustomInfo
</UL>

<P><STRONG><a name="[10c]"></a>__ARM_common_memcpy4_7</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, segger_rtt.o(i.__ARM_common_memcpy4_7))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_CheckGetDynamicHotel_V8
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_CheckGetDynamicFlat
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtoAnaly_UpdateTime
</UL>

<P><STRONG><a name="[bc]"></a>__ARM_common_memset4_12</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, access.o(i.__ARM_common_memset4_12))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlackList_RemoveKey
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockKey_CommPswdId
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockKey_Check_CardKey
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_LearnCardOk
</UL>

<P><STRONG><a name="[1d7]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1d8]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1d9]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[14a]"></a>adv_data_encode</STRONG> (Thumb, 1210 bytes, Stack size 48 bytes, ble_advdata.o(i.adv_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy1_6
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_encode
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
</UL>

<P><STRONG><a name="[14d]"></a>advertising_init</STRONG> (Thumb, 148 bytes, Stack size 176 bytes, main.o(i.advertising_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = advertising_init &rArr; ble_advertising_init &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dahao_get_manual_data
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dahao_start_advert
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[150]"></a>app_error_fault_handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_error_weak.o(i.app_error_fault_handler))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_fault_handler
</UL>

<P><STRONG><a name="[d0]"></a>app_error_handler_bare</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, app_error.o(i.app_error_handler_bare))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dahao_stop_advert
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dahao_start_advert
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_app_on_dfu_evt
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_app_dm_appl_instance_set
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dahao_get_scan_data
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dahao_add_characteristics
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dahao_timer_proc
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_prepare
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_evt
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_manager_evt_handler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_error_handler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC1_IRQHandler
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intern_softdevice_events_execute
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2_IRQHandler
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRawRC
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRawRC
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SpiSendByte
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SpiPageWrite
</UL>

<P><STRONG><a name="[16f]"></a>app_fifo_get</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, app_fifo.o(i.app_fifo_get))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_get
</UL>

<P><STRONG><a name="[171]"></a>app_fifo_init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, app_fifo.o(i.app_fifo_init))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
</UL>

<P><STRONG><a name="[174]"></a>app_fifo_put</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, app_fifo.o(i.app_fifo_put))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
</UL>

<P><STRONG><a name="[11a]"></a>app_pwm_channel_duty_set</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, app_pwm.o(i.app_pwm_channel_duty_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = app_pwm_channel_duty_set &rArr; app_pwm_channel_duty_ticks_set &rArr; nrf_drv_ppi_channels_remove_from_group &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_channel_duty_ticks_set
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmUser_SetPameterBuzz
</UL>

<P><STRONG><a name="[151]"></a>app_pwm_channel_duty_ticks_set</STRONG> (Thumb, 984 bytes, Stack size 40 bytes, app_pwm.o(i.app_pwm_channel_duty_ticks_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = app_pwm_channel_duty_ticks_set &rArr; nrf_drv_ppi_channels_remove_from_group &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_compare_int_enable
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_compare
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_out_task_force
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_out_task_addr_get
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_group_enable
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channels_remove_from_group
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channels_include_in_group
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_enable
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_disable
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_channel_duty_set
</UL>

<P><STRONG><a name="[11b]"></a>app_pwm_disable</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, app_pwm.o(i.app_pwm_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_pwm_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_disable
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_compare_int_disable
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_out_task_disable
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_uninit
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwm_IoCtl
</UL>

<P><STRONG><a name="[119]"></a>app_pwm_enable</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, app_pwm.o(i.app_pwm_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_pwm_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_enable
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_clear
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_out_task_force
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_out_task_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmUser_SetPameterBuzz
</UL>

<P><STRONG><a name="[118]"></a>app_pwm_init</STRONG> (Thumb, 588 bytes, Stack size 64 bytes, app_pwm.o(i.app_pwm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = app_pwm_init &rArr; app_pwm_channel_duty_ticks_set &rArr; nrf_drv_ppi_channels_remove_from_group &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_extended_compare
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_compare_int_disable
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_clear
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_out_task_addr_get
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_out_init
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_is_init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_channel_duty_ticks_set
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_dealloc
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_group_alloc
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_disable
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_assign
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmUser_SetPameterBuzz
</UL>

<P><STRONG><a name="[117]"></a>app_pwm_uninit</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, app_pwm.o(i.app_pwm_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = app_pwm_uninit &rArr; pwm_dealloc &rArr; nrf_drv_ppi_group_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_disable
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_dealloc
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwmUser_SetPameterBuzz
</UL>

<P><STRONG><a name="[17f]"></a>app_timer_create</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, app_timer.o(i.app_timer_create))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16b]"></a>app_timer_init</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, app_timer.o(i.app_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_app_timer_c_cd27f9c3__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c2]"></a>app_timer_start</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, app_timer.o(i.app_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysBasetimer_Start
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carddet_timer_start
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleProc_timer_start
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carddet_timer_handler
</UL>

<P><STRONG><a name="[c1]"></a>app_timer_stop</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, app_timer.o(i.app_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_stop
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_on_ble_evt
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysBasetimer_Start
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carddet_timer_start
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleProc_timer_start
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Carddet_timer_handler
</UL>

<P><STRONG><a name="[16d]"></a>app_uart_get</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, app_uart_fifo.o(i.app_uart_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_uart_get &rArr; nrf_drv_uart_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handle
</UL>

<P><STRONG><a name="[170]"></a>app_uart_init</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, app_uart_fifo.o(i.app_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = app_uart_init &rArr; nrf_drv_uart_init &rArr; nrf_drv_common_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx_enable
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_init
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[12b]"></a>app_uart_put</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, app_uart_fifo.o(i.app_uart_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_uart_put &rArr; nrf_drv_uart_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx_in_progress
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_put
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_get
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendUart_data
</UL>

<P><STRONG><a name="[1bc]"></a>app_util_critical_region_enter</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, app_util_platform.o(i.app_util_critical_region_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_group_free
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_group_alloc
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channels_remove_from_group
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channels_include_in_group
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_free
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_alloc
</UL>

<P><STRONG><a name="[1bd]"></a>app_util_critical_region_exit</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, app_util_platform.o(i.app_util_critical_region_exit))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_group_free
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_group_alloc
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channels_remove_from_group
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channels_include_in_group
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_free
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_alloc
</UL>

<P><STRONG><a name="[177]"></a>ble_advdata_set</STRONG> (Thumb, 120 bytes, Stack size 88 bytes, ble_advdata.o(i.ble_advdata_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
</UL>

<P><STRONG><a name="[14f]"></a>ble_advertising_init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, ble_advertising.o(i.ble_advertising_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ble_advertising_init &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memclr4_7
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
</UL>

<P><STRONG><a name="[179]"></a>ble_advertising_on_ble_evt</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, ble_advertising.o(i.ble_advertising_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = ble_advertising_on_ble_evt &rArr; ble_advertising_start &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[17b]"></a>ble_advertising_on_sys_evt</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ble_advertising.o(i.ble_advertising_on_sys_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = ble_advertising_on_sys_evt &rArr; ble_advertising_start &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_evt_dispatch
</UL>

<P><STRONG><a name="[17a]"></a>ble_advertising_start</STRONG> (Thumb, 484 bytes, Stack size 48 bytes, ble_advertising.o(i.ble_advertising_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ble_advertising_start &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_access_status_get
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_queued_op_count_get
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memclr4_7
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dahao_start_advert
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_sys_evt
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_ble_evt
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dahao_timer_proc
</UL>

<P><STRONG><a name="[17e]"></a>ble_conn_params_init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ble_conn_params.o(i.ble_conn_params_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_conn_params_init
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[180]"></a>ble_conn_params_on_ble_evt</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, ble_conn_params.o(i.ble_conn_params_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ble_conn_params_on_ble_evt &rArr; conn_params_negotiation &rArr; app_timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[182]"></a>ble_conn_params_stop</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ble_conn_params.o(i.ble_conn_params_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_conn_params_stop &rArr; app_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_prepare
</UL>

<P><STRONG><a name="[183]"></a>ble_dahao_add_characteristics</STRONG> (Thumb, 138 bytes, Stack size 72 bytes, ble_dahao.o(i.ble_dahao_add_characteristics))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ble_dahao_add_characteristics &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b5]"></a>ble_dahao_add_service</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ble_dahao.o(i.ble_dahao_add_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_dahao_add_service
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14e]"></a>ble_dahao_get_manual_data</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, ble_dahao.o(i.ble_dahao_get_manual_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_dahao_get_manual_data
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy1_6
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
</UL>

<P><STRONG><a name="[185]"></a>ble_dahao_get_scan_data</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, ble_dahao.o(i.ble_dahao_get_scan_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ble_dahao_get_scan_data &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e9]"></a>ble_dahao_notify_data</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, ble_dahao.o(i.ble_dahao_notify_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_dahao_notify_data
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCommu_TimerProc
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCommu_SendStart
</UL>

<P><STRONG><a name="[186]"></a>ble_dahao_on_ble_evt</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ble_dahao.o(i.ble_dahao_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ble_dahao_on_ble_evt &rArr; Proto_CommHostPackRec &rArr; BleProc_timer_start &rArr; __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Proto_CommHostPackRec
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[a7]"></a>ble_dahao_start_advert</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, ble_dahao.o(i.ble_dahao_start_advert))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = ble_dahao_start_advert &rArr; advertising_init &rArr; ble_advertising_init &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_TimerProc
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Proc
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_CardDatProc
</UL>

<P><STRONG><a name="[cb]"></a>ble_dahao_stop_advert</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ble_dahao.o(i.ble_dahao_stop_advert))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_dahao_stop_advert &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Factory_Proc
</UL>

<P><STRONG><a name="[12e]"></a>ble_dahao_timer_proc</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, main.o(i.ble_dahao_timer_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ble_dahao_timer_proc &rArr; ble_advertising_start &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysBase_timer_handler
</UL>

<P><STRONG><a name="[1b6]"></a>ble_dfu_init</STRONG> (Thumb, 450 bytes, Stack size 96 bytes, ble_dfu.o(i.ble_dfu_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ble_dfu_init
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[187]"></a>ble_dfu_on_ble_evt</STRONG> (Thumb, 426 bytes, Stack size 64 bytes, ble_dfu.o(i.ble_dfu_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ble_dfu_on_ble_evt &rArr; ble_dfu_response_send
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_response_send
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_wdt_feed
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[189]"></a>ble_dfu_response_send</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, ble_dfu.o(i.ble_dfu_response_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_dfu_response_send
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_app_on_dfu_evt
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_on_ble_evt
</UL>

<P><STRONG><a name="[18b]"></a>bond_data_load</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, device_manager_peripheral.o(i.bond_data_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bond_data_load &rArr; pstorage_load
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_load
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_block_identifier_get
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
</UL>

<P><STRONG><a name="[18e]"></a>bootloader_util_app_start</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bootloader_util.o(i.bootloader_util_app_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bootloader_util_app_start
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___17_bootloader_util_c_c13d365c__bootloader_util_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_app_on_dfu_evt
</UL>

<P><STRONG><a name="[190]"></a>bsp_btn_ble_sleep_mode_prepare</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp_btn_ble.o(i.bsp_btn_ble_sleep_mode_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_btn_ble_sleep_mode_prepare
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_wakeup_buttons_set
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
</UL>

<P><STRONG><a name="[191]"></a>bsp_wakeup_buttons_set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp.o(i.bsp_wakeup_buttons_set))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_btn_ble_sleep_mode_prepare
</UL>

<P><STRONG><a name="[19c]"></a>dfu_app_dm_appl_instance_set</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dfu_app_handler.o(i.dfu_app_dm_appl_instance_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dfu_app_dm_appl_instance_set &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_application_instance_set
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[36]"></a>dfu_app_on_dfu_evt</STRONG> (Thumb, 280 bytes, Stack size 64 bytes, dfu_app_handler.o(i.dfu_app_on_dfu_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = dfu_app_on_dfu_evt &rArr; dm_application_context_set &rArr; pstorage_update &rArr; cmd_queue_enqueue &rArr; sm_state_change &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_peer_addr_get
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_handle_get
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_distributed_keys_get
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_application_context_set
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_response_send
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootloader_util_app_start
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[1b7]"></a>dfu_app_reset_prepare_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dfu_app_handler.o(i.dfu_app_reset_prepare_set))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19b]"></a>dm_application_context_delete</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, device_manager_peripheral.o(i.dm_application_context_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = dm_application_context_delete &rArr; pstorage_update &rArr; cmd_queue_enqueue &rArr; sm_state_change &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_update
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_load
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_block_identifier_get
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_manager_evt_handler
</UL>

<P><STRONG><a name="[19a]"></a>dm_application_context_get</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, device_manager_peripheral.o(i.dm_application_context_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = dm_application_context_get &rArr; pstorage_load
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_load
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_block_identifier_get
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_manager_evt_handler
</UL>

<P><STRONG><a name="[1a1]"></a>dm_application_context_set</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, device_manager_peripheral.o(i.dm_application_context_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = dm_application_context_set &rArr; pstorage_update &rArr; cmd_queue_enqueue &rArr; sm_state_change &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_update
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_load
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_block_identifier_get
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_app_on_dfu_evt
</UL>

<P><STRONG><a name="[19d]"></a>dm_application_instance_set</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, device_manager_peripheral.o(i.dm_application_instance_set))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_app_dm_appl_instance_set
</UL>

<P><STRONG><a name="[18a]"></a>dm_ble_evt_handler</STRONG> (Thumb, 1352 bytes, Stack size 88 bytes, device_manager_peripheral.o(i.dm_ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = dm_ble_evt_handler &rArr; pstorage_clear &rArr; cmd_queue_enqueue &rArr; sm_state_change &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_clear
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_block_identifier_get
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bond_data_load
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memclr2_7
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_instance_init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_context_store
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[19f]"></a>dm_distributed_keys_get</STRONG> (Thumb, 156 bytes, Stack size 64 bytes, device_manager_peripheral.o(i.dm_distributed_keys_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = dm_distributed_keys_get &rArr; pstorage_load
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_load
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_block_identifier_get
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_app_on_dfu_evt
</UL>

<P><STRONG><a name="[19e]"></a>dm_handle_get</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, device_manager_peripheral.o(i.dm_handle_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dm_handle_get
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_app_on_dfu_evt
</UL>

<P><STRONG><a name="[1a5]"></a>dm_init</STRONG> (Thumb, 274 bytes, Stack size 40 bytes, device_manager_peripheral.o(i.dm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = dm_init &rArr; pstorage_clear &rArr; cmd_queue_enqueue &rArr; sm_state_change &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_register
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_load
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_clear
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_block_identifier_get
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memclr2_7
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memclr1_6
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a0]"></a>dm_peer_addr_get</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, device_manager_peripheral.o(i.dm_peer_addr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dm_peer_addr_get
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_app_on_dfu_evt
</UL>

<P><STRONG><a name="[1a8]"></a>dm_register</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, device_manager_peripheral.o(i.dm_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dm_register
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy1_5
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17d]"></a>fs_queued_op_count_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fstorage.o(i.fs_queued_op_count_get))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[12a]"></a>intern_softdevice_events_execute</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, softdevice_handler.o(i.intern_softdevice_events_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = intern_softdevice_events_execute &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2_IRQHandler
</UL>

<P><STRONG><a name="[20]"></a>main</STRONG> (Thumb, 590 bytes, Stack size 32 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = main &rArr; advertising_init &rArr; ble_advertising_init &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_sys_evt_handler_set
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_handler_init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_enable_get_default_config
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_enable
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_ble_evt_handler_set
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_check_ram_start
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_register
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_app_reset_prepare_set
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_app_dm_appl_instance_set
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dahao_get_scan_data
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dahao_add_service
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dahao_add_characteristics
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_wdt_start
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_wdt_feed
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_init
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memclr1_5
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysBasetimer_Start
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1b9]"></a>nrf_delay_ms</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, nrf_delay.o(i.nrf_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_nrf_delay_c_532987f3__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_prepare
</UL>

<P><STRONG><a name="[1ba]"></a>nrf_drv_common_irq_enable</STRONG> (Thumb, 80 bytes, Stack size 4 bytes, nrf_drv_common.o(i.nrf_drv_common_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
</UL>

<P><STRONG><a name="[164]"></a>nrf_drv_gpiote_init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_drv_gpiote_init &rArr; nrf_drv_common_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_init
</UL>

<P><STRONG><a name="[163]"></a>nrf_drv_gpiote_is_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_is_init))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_init
</UL>

<P><STRONG><a name="[168]"></a>nrf_drv_gpiote_out_init</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_out_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_drv_gpiote_out_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_init
</UL>

<P><STRONG><a name="[159]"></a>nrf_drv_gpiote_out_task_addr_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_out_task_addr_get))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_channel_duty_ticks_set
</UL>

<P><STRONG><a name="[15e]"></a>nrf_drv_gpiote_out_task_disable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_out_task_disable))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_disable
</UL>

<P><STRONG><a name="[15f]"></a>nrf_drv_gpiote_out_task_enable</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_out_task_enable))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_enable
</UL>

<P><STRONG><a name="[153]"></a>nrf_drv_gpiote_out_task_force</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_out_task_force))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_enable
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_channel_duty_ticks_set
</UL>

<P><STRONG><a name="[1c2]"></a>nrf_drv_gpiote_out_uninit</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_out_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_drv_gpiote_out_uninit
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_dealloc
</UL>

<P><STRONG><a name="[165]"></a>nrf_drv_ppi_channel_alloc</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, nrf_drv_ppi.o(i.nrf_drv_ppi_channel_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_drv_ppi_channel_alloc &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_init
</UL>

<P><STRONG><a name="[157]"></a>nrf_drv_ppi_channel_assign</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, nrf_drv_ppi.o(i.nrf_drv_ppi_channel_assign))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = nrf_drv_ppi_channel_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_channel_duty_ticks_set
</UL>

<P><STRONG><a name="[152]"></a>nrf_drv_ppi_channel_disable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, nrf_drv_ppi.o(i.nrf_drv_ppi_channel_disable))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_disable
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_channel_duty_ticks_set
</UL>

<P><STRONG><a name="[158]"></a>nrf_drv_ppi_channel_enable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, nrf_drv_ppi.o(i.nrf_drv_ppi_channel_enable))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_channel_duty_ticks_set
</UL>

<P><STRONG><a name="[1be]"></a>nrf_drv_ppi_channel_free</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, nrf_drv_ppi.o(i.nrf_drv_ppi_channel_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_ppi_channel_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_dealloc
</UL>

<P><STRONG><a name="[156]"></a>nrf_drv_ppi_channels_include_in_group</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, nrf_drv_ppi.o(i.nrf_drv_ppi_channels_include_in_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_ppi_channels_include_in_group &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_channel_duty_ticks_set
</UL>

<P><STRONG><a name="[155]"></a>nrf_drv_ppi_channels_remove_from_group</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, nrf_drv_ppi.o(i.nrf_drv_ppi_channels_remove_from_group))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_ppi_channels_remove_from_group &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_channel_duty_ticks_set
</UL>

<P><STRONG><a name="[166]"></a>nrf_drv_ppi_group_alloc</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, nrf_drv_ppi.o(i.nrf_drv_ppi_group_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_drv_ppi_group_alloc &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_init
</UL>

<P><STRONG><a name="[15a]"></a>nrf_drv_ppi_group_enable</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, nrf_drv_ppi.o(i.nrf_drv_ppi_group_enable))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_channel_duty_ticks_set
</UL>

<P><STRONG><a name="[1bf]"></a>nrf_drv_ppi_group_free</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, nrf_drv_ppi.o(i.nrf_drv_ppi_group_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_ppi_group_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_dealloc
</UL>

<P><STRONG><a name="[162]"></a>nrf_drv_ppi_init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_drv_ppi.o(i.nrf_drv_ppi_init))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_init
</UL>

<P><STRONG><a name="[136]"></a>nrf_drv_spi_init</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, nrf_drv_spi.o(i.nrf_drv_spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrf_drv_spi_init &rArr; nrf_drv_common_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_SpiOpen
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Init
</UL>

<P><STRONG><a name="[cf]"></a>nrf_drv_spi_transfer</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, nrf_drv_spi.o(i.nrf_drv_spi_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRawRC
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRawRC
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SpiSendByte
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SpiPageWrite
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC595_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HC595_LedWriteData
</UL>

<P><STRONG><a name="[1c0]"></a>nrf_drv_spi_xfer</STRONG> (Thumb, 270 bytes, Stack size 20 bytes, nrf_drv_spi.o(i.nrf_drv_spi_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_drv_spi_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_transfer
</UL>

<P><STRONG><a name="[160]"></a>nrf_drv_timer_clear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_drv_timer.o(i.nrf_drv_timer_clear))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_enable
</UL>

<P><STRONG><a name="[154]"></a>nrf_drv_timer_compare</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, nrf_drv_timer.o(i.nrf_drv_timer_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_drv_timer_compare
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_channel_duty_ticks_set
</UL>

<P><STRONG><a name="[15d]"></a>nrf_drv_timer_compare_int_disable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_drv_timer.o(i.nrf_drv_timer_compare_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_ready_tick
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_disable
</UL>

<P><STRONG><a name="[15b]"></a>nrf_drv_timer_compare_int_enable</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, nrf_drv_timer.o(i.nrf_drv_timer_compare_int_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = nrf_drv_timer_compare_int_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_channel_duty_ticks_set
</UL>

<P><STRONG><a name="[15c]"></a>nrf_drv_timer_disable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_drv_timer.o(i.nrf_drv_timer_disable))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_disable
</UL>

<P><STRONG><a name="[161]"></a>nrf_drv_timer_enable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_drv_timer.o(i.nrf_drv_timer_enable))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_enable
</UL>

<P><STRONG><a name="[16a]"></a>nrf_drv_timer_extended_compare</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, nrf_drv_timer.o(i.nrf_drv_timer_extended_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_drv_timer_extended_compare
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_init
</UL>

<P><STRONG><a name="[169]"></a>nrf_drv_timer_init</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, nrf_drv_timer.o(i.nrf_drv_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_drv_timer_init &rArr; nrf_drv_common_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_init
</UL>

<P><STRONG><a name="[1c3]"></a>nrf_drv_timer_uninit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, nrf_drv_timer.o(i.nrf_drv_timer_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_drv_timer_uninit
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_dealloc
</UL>

<P><STRONG><a name="[172]"></a>nrf_drv_uart_init</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, nrf_drv_uart.o(i.nrf_drv_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrf_drv_uart_init &rArr; nrf_drv_common_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
</UL>

<P><STRONG><a name="[16e]"></a>nrf_drv_uart_rx</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, nrf_drv_uart.o(i.nrf_drv_uart_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_drv_uart_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_get
</UL>

<P><STRONG><a name="[173]"></a>nrf_drv_uart_rx_enable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_drv_uart_rx_enable))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
</UL>

<P><STRONG><a name="[176]"></a>nrf_drv_uart_tx</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, nrf_drv_uart.o(i.nrf_drv_uart_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_drv_uart_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
</UL>

<P><STRONG><a name="[175]"></a>nrf_drv_uart_tx_in_progress</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_drv_uart_tx_in_progress))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
</UL>

<P><STRONG><a name="[17c]"></a>pstorage_access_status_get</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, pstorage.o(i.pstorage_access_status_get))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[18c]"></a>pstorage_block_identifier_get</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, pstorage.o(i.pstorage_block_identifier_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pstorage_block_identifier_get
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_distributed_keys_get
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_application_context_set
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bond_data_load
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_pstorage_cb_handler
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_context_store
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_init
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_application_context_get
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_application_context_delete
</UL>

<P><STRONG><a name="[1a3]"></a>pstorage_clear</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, pstorage.o(i.pstorage_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = pstorage_clear &rArr; cmd_queue_enqueue &rArr; sm_state_change &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_enqueue
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_init
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
</UL>

<P><STRONG><a name="[1b3]"></a>pstorage_init</STRONG> (Thumb, 96 bytes, Stack size 4 bytes, pstorage.o(i.pstorage_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = pstorage_init
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18d]"></a>pstorage_load</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, pstorage.o(i.pstorage_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pstorage_load
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_distributed_keys_get
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_application_context_set
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bond_data_load
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattsc_context_load
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_context_load
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_init
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_application_context_get
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_application_context_delete
</UL>

<P><STRONG><a name="[1a7]"></a>pstorage_register</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, pstorage.o(i.pstorage_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = pstorage_register &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_init
</UL>

<P><STRONG><a name="[2e]"></a>pstorage_store</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, pstorage.o(i.pstorage_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = pstorage_store &rArr; cmd_queue_enqueue &rArr; sm_state_change &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_enqueue
</UL>
<BR>[Address Reference Count : 3]<UL><LI> device_manager_peripheral.o(i.device_context_store)
<LI> device_manager_peripheral.o(i.dm_application_context_set)
<LI> device_manager_peripheral.o(i.gatts_context_store)
</UL>
<P><STRONG><a name="[1c1]"></a>pstorage_sys_event_handler</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, pstorage.o(i.pstorage_sys_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = pstorage_sys_event_handler &rArr; flash_operation_success_run &rArr; command_end_procedure_run &rArr; sm_state_change &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_success_run
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_evt_dispatch
</UL>

<P><STRONG><a name="[2d]"></a>pstorage_update</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, pstorage.o(i.pstorage_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = pstorage_update &rArr; cmd_queue_enqueue &rArr; sm_state_change &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_application_context_set
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_application_context_delete
</UL>
<BR>[Address Reference Count : 3]<UL><LI> device_manager_peripheral.o(i.device_context_store)
<LI> device_manager_peripheral.o(i.dm_application_context_set)
<LI> device_manager_peripheral.o(i.gatts_context_store)
</UL>
<P><STRONG><a name="[29]"></a>pwm_ready_tick</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, app_pwm.o(i.pwm_ready_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pwm_ready_tick
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_compare_int_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_pwm.o(i.app_pwm_init)
</UL>
<P><STRONG><a name="[1af]"></a>sd_check_ram_start</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, softdevice_handler.o(i.sd_check_ram_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = sd_check_ram_start
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b1]"></a>softdevice_ble_evt_handler_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, softdevice_handler.o(i.softdevice_ble_evt_handler_set))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b0]"></a>softdevice_enable</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, softdevice_handler.o(i.softdevice_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = softdevice_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ae]"></a>softdevice_enable_get_default_config</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, softdevice_handler.o(i.softdevice_enable_get_default_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = softdevice_enable_get_default_config
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3a]"></a>softdevice_fault_handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, softdevice_handler.o(i.softdevice_fault_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = softdevice_fault_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> softdevice_handler.o(i.softdevice_handler_init)
</UL>
<P><STRONG><a name="[1ad]"></a>softdevice_handler_init</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, softdevice_handler.o(i.softdevice_handler_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = softdevice_handler_init
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b2]"></a>softdevice_sys_evt_handler_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, softdevice_handler.o(i.softdevice_sys_evt_handler_set))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13f]"></a>sys_CheckGetDynamicDate</STRONG> (Thumb, 900 bytes, Stack size 88 bytes, encpt.o(i.sys_CheckGetDynamicDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = sys_CheckGetDynamicDate &rArr; LockKey_Add_VisitCodeKey &rArr; ProtoAnaly_AddId &rArr; BlackList_RemoveKey &rArr; BlackList_StorePara
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_GenFun32To8
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockKey_Add_VisitCodeKey
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_WriteRecordFlash
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encpt_EncryptExt
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_KeyProc
</UL>

<P><STRONG><a name="[140]"></a>sys_CheckGetDynamicFlat</STRONG> (Thumb, 1134 bytes, Stack size 112 bytes, encpt.o(i.sys_CheckGetDynamicFlat))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = sys_CheckGetDynamicFlat &rArr; LockKey_Add_VisitCodeKey &rArr; ProtoAnaly_AddId &rArr; BlackList_RemoveKey &rArr; BlackList_StorePara
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_7
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_GenFun32To8
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_StorePara
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockKey_Remove_PasswordKey
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockKey_Add_VisitCodeKey
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_WriteRecordFlash
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_FlashArrang
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encpt_EncryptExt
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlackList_StorePara
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlackList_Add
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_KeyProc
</UL>

<P><STRONG><a name="[141]"></a>sys_CheckGetDynamicHotel_V8</STRONG> (Thumb, 1426 bytes, Stack size 120 bytes, encpt.o(i.sys_CheckGetDynamicHotel_V8))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = sys_CheckGetDynamicHotel_V8 &rArr; LockKey_Add_VisitCodeKey &rArr; ProtoAnaly_AddId &rArr; BlackList_RemoveKey &rArr; BlackList_StorePara
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_7
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_GenFun32To8
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_StorePara
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockKey_Remove_VisitCodeKey
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockKey_Add_VisitCodeKey
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_WriteRecordFlash
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encpt_EncryptExt
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_KeyProc
</UL>

<P><STRONG><a name="[3b]"></a>uart_event_handle</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(i.uart_event_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uart_event_handle &rArr; app_uart_get &rArr; nrf_drv_uart_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.uart_init)
</UL>
<P><STRONG><a name="[135]"></a>uart_init</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, main.o(i.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = uart_init &rArr; app_uart_init &rArr; nrf_drv_uart_init &rArr; nrf_drv_common_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Init
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[30]"></a>BleProc_timer_handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(i.BleProc_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = BleProc_timer_handler &rArr; LockCommu_Proc &rArr; Proto_CommHostUnPackRec &rArr; Proto_CommHostAckPack &rArr; AES_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCommu_Proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[32]"></a>Carddet_timer_handler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, main.o(i.Carddet_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = Carddet_timer_handler &rArr; Access_DetCardProc &rArr; Access_CardDatProc &rArr; ble_dahao_start_advert &rArr; advertising_init &rArr; ble_advertising_init &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_SpiOpen
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_DetCardProc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[31]"></a>SysBase_timer_handler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, main.o(i.SysBase_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = SysBase_timer_handler &rArr; Touch_Proc &rArr; ble_dahao_start_advert &rArr; advertising_init &rArr; ble_advertising_init &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_TimerProc
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Touch_Proc
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_RestProc
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReLay_Timepro
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Factory_Proc
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Access_TimerProc
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dahao_timer_proc
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysBasetimer_Start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[33]"></a>ble_evt_dispatch</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, main.o(i.ble_evt_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ble_evt_dispatch &rArr; ble_advertising_on_ble_evt &rArr; ble_advertising_start &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dfu_on_ble_evt
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dahao_on_ble_evt
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_on_ble_evt
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_ble_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[39]"></a>conn_params_error_handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(i.conn_params_error_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = conn_params_error_handler &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[35]"></a>device_manager_evt_handler</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, main.o(i.device_manager_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = device_manager_evt_handler &rArr; dm_application_context_delete &rArr; pstorage_update &rArr; cmd_queue_enqueue &rArr; sm_state_change &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_application_context_get
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_application_context_delete
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[28]"></a>on_adv_evt</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, main.o(i.on_adv_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = on_adv_evt &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_btn_ble_sleep_mode_prepare
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.advertising_init)
</UL>
<P><STRONG><a name="[38]"></a>on_conn_params_evt</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(i.on_conn_params_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = on_conn_params_evt &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[37]"></a>reset_prepare</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, main.o(i.reset_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = reset_prepare &rArr; ble_conn_params_stop &rArr; app_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_ms
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_stop
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[34]"></a>sys_evt_dispatch</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(i.sys_evt_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = sys_evt_dispatch &rArr; ble_advertising_on_sys_evt &rArr; ble_advertising_start &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_sys_event_handler
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_sys_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[14c]"></a>uuid_list_encode</STRONG> (Thumb, 48 bytes, Stack size 48 bytes, ble_advdata.o(i.uuid_list_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_sized_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[1c4]"></a>uuid_list_sized_encode</STRONG> (Thumb, 178 bytes, Stack size 48 bytes, ble_advdata.o(i.uuid_list_sized_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = uuid_list_sized_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_encode
</UL>

<P><STRONG><a name="[181]"></a>conn_params_negotiation</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ble_conn_params.o(i.conn_params_negotiation))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = conn_params_negotiation &rArr; app_timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_on_ble_evt
</UL>

<P><STRONG><a name="[2b]"></a>update_timeout_handler</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ble_conn_params.o(i.update_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = update_timeout_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn_params.o(i.ble_conn_params_init)
</UL>
<P><STRONG><a name="[199]"></a>device_context_store</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, device_manager_peripheral.o(i.device_context_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = device_context_store &rArr; pstorage_block_identifier_get
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_block_identifier_get
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
</UL>

<P><STRONG><a name="[2f]"></a>dm_pstorage_cb_handler</STRONG> (Thumb, 422 bytes, Stack size 112 bytes, device_manager_peripheral.o(i.dm_pstorage_cb_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = dm_pstorage_cb_handler &rArr; pstorage_block_identifier_get
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_block_identifier_get
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(i.dm_init)
</UL>
<P><STRONG><a name="[46]"></a>gattc_context_apply</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, device_manager_peripheral.o(i.gattc_context_apply))
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[42]"></a>gattc_context_load</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, device_manager_peripheral.o(i.gattc_context_load))
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[3e]"></a>gattc_context_store</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, device_manager_peripheral.o(i.gattc_context_store))
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[45]"></a>gatts_context_apply</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, device_manager_peripheral.o(i.gatts_context_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gatts_context_apply
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattsc_context_apply
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[41]"></a>gatts_context_load</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, device_manager_peripheral.o(i.gatts_context_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gatts_context_load &rArr; pstorage_load
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_load
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[3d]"></a>gatts_context_store</STRONG> (Thumb, 174 bytes, Stack size 64 bytes, device_manager_peripheral.o(i.gatts_context_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = gatts_context_store &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gattsc_context_store
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[47]"></a>gattsc_context_apply</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, device_manager_peripheral.o(i.gattsc_context_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gattsc_context_apply &rArr; gatts_context_apply
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_context_apply
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[43]"></a>gattsc_context_load</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, device_manager_peripheral.o(i.gattsc_context_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = gattsc_context_load &rArr; pstorage_load
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_load
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[3f]"></a>gattsc_context_store</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, device_manager_peripheral.o(i.gattsc_context_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = gattsc_context_store &rArr; gatts_context_store &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatts_context_store
</UL>
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[44]"></a>no_service_context_apply</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, device_manager_peripheral.o(i.no_service_context_apply))
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[40]"></a>no_service_context_load</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, device_manager_peripheral.o(i.no_service_context_load))
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[3c]"></a>no_service_context_store</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, device_manager_peripheral.o(i.no_service_context_store))
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(.constdata)
</UL>
<P><STRONG><a name="[1a2]"></a>peer_instance_init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, device_manager_peripheral.o(i.peer_instance_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = peer_instance_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memclr1_6
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_ble_evt_handler
</UL>

<P><STRONG><a name="[2c]"></a>storage_operation_dummy_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, device_manager_peripheral.o(i.storage_operation_dummy_handler))
<BR>[Address Reference Count : 1]<UL><LI> device_manager_peripheral.o(i.device_context_store)
</UL>
<P><STRONG><a name="[2a]"></a>uart_event_handler</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, app_uart_fifo.o(i.uart_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = uart_event_handler &rArr; nrf_drv_uart_tx
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_put
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_uart_fifo.o(i.app_uart_init)
</UL>
<P><STRONG><a name="[1bb]"></a>channel_port_alloc</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, nrf_drv_gpiote.o(i.channel_port_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = channel_port_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_out_init
</UL>

<P><STRONG><a name="[149]"></a>uart_irq_handler</STRONG> (Thumb, 344 bytes, Stack size 40 bytes, nrf_drv_uart.o(i.uart_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = uart_irq_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[192]"></a>clear_operation_execute</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, pstorage.o(i.clear_operation_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + In Cycle
<LI>Call Chain = clear_operation_execute &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_enqueue
</UL>

<P><STRONG><a name="[196]"></a>cmd_queue_element_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, pstorage.o(i.cmd_queue_element_init))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_end_procedure_run
</UL>

<P><STRONG><a name="[194]"></a>cmd_queue_enqueue</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, pstorage.o(i.cmd_queue_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = cmd_queue_enqueue &rArr; sm_state_change &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_operation_execute
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_update
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_store
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_clear
</UL>

<P><STRONG><a name="[195]"></a>command_end_procedure_run</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, pstorage.o(i.command_end_procedure_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = command_end_procedure_run &rArr; sm_state_change &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_element_init
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tail_restore_state_run
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;head_restore_state_run
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_success_run
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_page_erase_state_run
</UL>

<P><STRONG><a name="[4f]"></a>data_page_erase_state_run</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, pstorage.o(i.data_page_erase_state_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = data_page_erase_state_run &rArr; command_end_procedure_run &rArr; sm_state_change &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_err_busy_process
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_page_erase_required
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_end_procedure_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[4e]"></a>data_to_swap_write_state_run</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, pstorage.o(i.data_to_swap_write_state_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = data_to_swap_write_state_run
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_err_busy_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[1aa]"></a>flash_api_err_code_process</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, pstorage.o(i.flash_api_err_code_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = flash_api_err_code_process &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_cmd_flash_write_execute
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_write_data_swap_entry_run
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_swap_erase_entry_run
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_restore_tail_entry_run
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_restore_head_entry_run
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_erase_data_page_entry_run
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
</UL>

<P><STRONG><a name="[1ab]"></a>flash_operation_success_run</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, pstorage.o(i.flash_operation_success_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = flash_operation_success_run &rArr; command_end_procedure_run &rArr; sm_state_change &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_cmd_flash_write_execute
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_page_erase_required
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_end_procedure_run
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_sys_event_handler
</UL>

<P><STRONG><a name="[51]"></a>head_restore_state_run</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, pstorage.o(i.head_restore_state_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = head_restore_state_run &rArr; command_end_procedure_run &rArr; sm_state_change &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_err_busy_process
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_page_erase_required
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_end_procedure_run
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[197]"></a>is_page_erase_required</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, pstorage.o(i.is_page_erase_required))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = is_page_erase_required &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;head_restore_state_run
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_success_run
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_page_erase_state_run
</UL>

<P><STRONG><a name="[193]"></a>sm_state_change</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, pstorage.o(i.sm_state_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + In Cycle
<LI>Call Chain = sm_state_change &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_cmd_flash_write_execute
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_api_err_code_process
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_operation_execute
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstorage_sys_event_handler
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tail_restore_state_run
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;head_restore_state_run
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_success_run
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_api_err_code_process
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_page_erase_state_run
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_end_procedure_run
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_queue_enqueue
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_operation_execute
</UL>

<P><STRONG><a name="[4a]"></a>state_erase_data_page_entry_run</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, pstorage.o(i.state_erase_data_page_entry_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = state_erase_data_page_entry_run &rArr; flash_api_err_code_process &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_api_err_code_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[4c]"></a>state_restore_head_entry_run</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, pstorage.o(i.state_restore_head_entry_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = state_restore_head_entry_run &rArr; flash_api_err_code_process &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_api_err_code_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[4b]"></a>state_restore_tail_entry_run</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, pstorage.o(i.state_restore_tail_entry_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = state_restore_tail_entry_run &rArr; flash_api_err_code_process &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_api_err_code_process
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[48]"></a>state_swap_erase_entry_run</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, pstorage.o(i.state_swap_erase_entry_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = state_swap_erase_entry_run &rArr; flash_api_err_code_process &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_api_err_code_process
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[49]"></a>state_write_data_swap_entry_run</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, pstorage.o(i.state_write_data_swap_entry_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = state_write_data_swap_entry_run &rArr; flash_api_err_code_process &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_api_err_code_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[1ac]"></a>store_cmd_flash_write_execute</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, pstorage.o(i.store_cmd_flash_write_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = store_cmd_flash_write_execute &rArr; flash_api_err_code_process &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_api_err_code_process
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_operation_success_run
</UL>

<P><STRONG><a name="[4d]"></a>swap_erase_state_run</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, pstorage.o(i.swap_erase_state_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = swap_erase_state_run
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_err_busy_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[198]"></a>swap_sub_state_err_busy_process</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pstorage.o(i.swap_sub_state_err_busy_process))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tail_restore_state_run
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_erase_state_run
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;head_restore_state_run
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_to_swap_write_state_run
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_page_erase_state_run
</UL>

<P><STRONG><a name="[50]"></a>tail_restore_state_run</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, pstorage.o(i.tail_restore_state_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = tail_restore_state_run &rArr; command_end_procedure_run &rArr; sm_state_change &rArr;  sm_state_change (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_sub_state_err_busy_process
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_state_change
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;command_end_procedure_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pstorage.o(.constdata)
</UL>
<P><STRONG><a name="[128]"></a>transfer_byte</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, nrf_drv_spi.o(i.transfer_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = transfer_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_TWI0_IRQHandler
</UL>

<P><STRONG><a name="[97]"></a>adc_sample_process</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, nrf_drv_adc.o(i.adc_sample_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = adc_sample_process
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[129]"></a>timer_list_handler</STRONG> (Thumb, 780 bytes, Stack size 48 bytes, app_timer.o(i.timer_list_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = timer_list_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_app_timer_c_cd27f9c3__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI0_IRQHandler
</UL>

<P><STRONG><a name="[16c]"></a>user_id_get</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, app_timer.o(i.user_id_get))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>

<P><STRONG><a name="[0]"></a>dfu_app_reset_prepare</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dfu_app_handler.o(i.dfu_app_reset_prepare))
<BR>[Address Reference Count : 1]<UL><LI> dfu_app_handler.o(.data)
</UL>
<P><STRONG><a name="[167]"></a>pwm_dealloc</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, app_pwm.o(i.pwm_dealloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pwm_dealloc &rArr; nrf_drv_ppi_group_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_timer_uninit
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_out_uninit
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_group_free
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_ppi_channel_free
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_uninit
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_pwm_init
</UL>

<P><STRONG><a name="[139]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sys.o(i.nrf_gpio_cfg_output))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_IoStartUp
</UL>

<P><STRONG><a name="[9c]"></a>AddRoundKey</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, aes.o(i.AddRoundKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AddRoundKey
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_ECB_decrypt
</UL>

<P><STRONG><a name="[9e]"></a>InvMixColumns</STRONG> (Thumb, 394 bytes, Stack size 120 bytes, aes.o(i.InvMixColumns))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = InvMixColumns
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_ECB_decrypt
</UL>

<P><STRONG><a name="[9d]"></a>InvShiftRows</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, aes.o(i.InvShiftRows))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_ECB_decrypt
</UL>

<P><STRONG><a name="[9b]"></a>KeyExpansion</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, aes.o(i.KeyExpansion))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = KeyExpansion
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_ECB_decrypt
</UL>

<P><STRONG><a name="[d1]"></a>Flash_SpiPageWrite</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, flash.o(i.Flash_SpiPageWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Flash_SpiPageWrite &rArr; Flash_SpiSendByte &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_transfer
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SpiSendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write
</UL>

<P><STRONG><a name="[cd]"></a>Flash_SpiWaitForWriteEndEx</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, flash.o(i.Flash_SpiWaitForWriteEndEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Flash_SpiWaitForWriteEndEx &rArr; Flash_SpiSendByte &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SpiSendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SpiBlockErase
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_IoCtl
</UL>

<P><STRONG><a name="[125]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtc.o(i.nrf_gpio_cfg_output))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Read
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Set
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_Open
</UL>

<P><STRONG><a name="[db]"></a>nrf_gpio_cfg_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, i2c_soft.o(i.nrf_gpio_cfg_input))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SOFT_Stop
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SOFT_Start
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SOFT_Byte_Tx
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SOFT_Byte_Rx
</UL>

<P><STRONG><a name="[dc]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, i2c_soft.o(i.nrf_gpio_cfg_output))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SOFT_Stop
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SOFT_Start
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SOFT_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SOFT_Byte_Tx
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SOFT_Byte_Rx
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
